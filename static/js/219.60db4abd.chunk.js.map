{"version":3,"file":"static/js/219.60db4abd.chunk.js","mappings":"0OAGaA,EAAb,+IACE,SAAYC,GACV,OAAOC,KAAKC,MAAL,UAAcD,KAAKE,MAAnB,UAAkCH,KAF7C,wBAKE,SAAWA,GACT,OAAOC,KAAKC,MAAL,UAAcD,KAAKE,MAAnB,SAAiCH,OAN5C,GAAoCI,EAAAA,IAU7B,SAASC,IAA8B,IAAtBC,EAAqB,uDAAJ,GACvC,OAAOC,EAAAA,EAAAA,IAAqCD,EAAM,YAAaP,GAK1D,SAASS,IAA0B,IAApBF,EAAmB,uDAAJ,GACnC,OAAOC,EAAAA,EAAAA,IAAmBD,EAAM,Y,sPCHnB,SAASG,EAAuBC,GAC7C,OAAiBC,EAAAA,EAAAA,MAAVC,GAAP,eACA,EAA8BC,EAAAA,UAAwB,GAAtD,eAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EADWH,EAAAA,WAAiBI,EAAAA,IAA1BC,KACiBC,SAEzB,GAA4BC,EAAAA,EAAAA,KAAW,kBAAMf,EAAAA,EAAAA,IAAQ,CAAEgB,KAAML,IAAeM,aAAY,CACtFC,YAAa,CAACP,KADRQ,EAAR,EAAQA,IAAR,EAAaC,WAIb,IAAKD,IAAQA,EAAIlB,KAAM,OAAO,KAE9B,IAAMoB,GAAWrB,EAAAA,EAAAA,IAAQmB,EAAIlB,MACvBqB,EAAMf,EAAOgB,IAAI,OAEjBC,GAAgB,SAAC,KAAD,CAAQC,QAAS,kBAAMf,GAAYD,IAAnC,qBAEtB,OAAQa,GACN,IAAK,UACH,OACE,SAACI,EAAD,CAAMC,KAAK,MAAX,UACE,SAAC,KAAD,CAAcC,MAAM,qBAI1B,IAAK,QACH,OACE,SAACF,EAAD,CAAMC,KAAK,MAAX,UACE,SAAC,KAAD,CAAcC,MAAM,2BAI1B,QACE,OACE,SAACF,EAAD,CAAMC,KAAK,MAAX,UACE,SAAC,KAAD,CAAcC,MAAM,QAAQC,QAASL,EAArC,UACE,SAACM,EAAD,CAA8BT,SAAAA,EAAUZ,QAAAA,EAAWsB,OAAQ,CAAC,gBASxE,IAAML,EAAO,SAAC,GAAD,IAAGM,EAAH,EAAGA,SAAa3B,GAAhB,mBACX,SAAC,KAAD,gBAAWuB,MAAM,SAAYvB,GAA7B,cACE,SAAC,KAAD,CACE2B,SAAUA,EACVC,QACE,iBAAKC,UAAU,oDAAf,WACE,SAAC,KAAD,CAAaC,OAAK,EAACC,OAAO,MAAMF,UAAU,OAA1C,oBAGA,SAAC,KAAD,CAAaE,OAAO,MAAMC,MAAM,UAAUH,UAAU,OAApD,sBAGA,SAAC,KAAD,CAAaE,OAAO,MAAMC,MAAM,QAAQH,UAAU,OAAlD,oBAGA,SAAC,KAAD,CAAaE,OAAO,MAAMC,MAAM,MAAhC,0BAWJP,EAAyB,SAAC,GAA0E,IAAxET,EAAuE,EAAvEA,SAAUU,EAA6D,EAA7DA,OAAQtB,EAAqD,EAArDA,QAC5C6B,IADiG,aAC1FC,EAAAA,EAAAA,IAAQ,CAAEC,OAAe,OAARnB,QAAQ,IAARA,OAAA,EAAAA,EAAUmB,QAAS,MAEjD,GAAI/B,EAAS,OAAO,gBAAKgC,wBAAyB,CAAEC,OAAQJ,EAAK3C,OAAO6C,OAAS,4BAEjF,IAAkBG,EAElB,OACE,UAAC,KAAD,CACEC,QAASN,EACTO,SAAU,SAACC,GAGT,OAFAA,EAAEC,iBAEK1B,EACJ2B,YAAYV,EAAK3C,QACjBsD,MAAK,SAACC,OACNC,OAAM,SAACL,QARd,WAHgBH,EAcJ,QAdqBZ,EAAOqB,SAAP,UAAmBT,MAehD,SAAC,WAAD,WACE,SAAC,eAAD,CAAgBA,KAAK,QAAQU,OAAQf,EAAK3C,OAAO6C,YAGrD,gBAAKN,UAAU,OAAf,UACE,SAAC,YAAD,CAAaG,MAAO","sources":["../../../../packages/miq-staffjs/src/setting/models.tsx","../../../../packages/miq-staffjs/src/setting/views.PagesUpdate.tsx"],"sourcesContent":["import { StaffModel, StaffService } from '../service';\nimport { TIndex, TSetting } from './types';\n\nexport class SettingService extends StaffService<TSetting> {\n  updatePages(values: any) {\n    return this.patch(`${this._path}pages/`, values);\n  }\n\n  updateSite(values: any) {\n    return this.patch(`${this._path}site/`, values);\n  }\n}\n\nexport function Setting(data: TSetting = {}) {\n  return StaffModel<TSetting, SettingService>(data, 'settings/', SettingService);\n}\n\nexport type TSettingInstance = ReturnType<typeof Setting>;\n\nexport function Index(data: TIndex = {}) {\n  return StaffModel<TIndex>(data, 'index/');\n}\n\nexport type TIndexInstance = ReturnType<typeof Index>;\n","import * as React from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport { useRequest } from '@miq/hookjs';\nimport Form, { useForm } from '@miq/formjs';\nimport { SharedDataCtx } from '@miq/contextjs';\nimport { Button, QueryButton } from '@miq/componentjs';\n\nimport StaffView from '../Views';\nimport { StaffSection } from '../components';\n\nimport { Setting, TSettingInstance } from './models';\n\ntype Props = {\n  onUpdate?: (payload: any) => void;\n};\n\nexport default function PagesSettingUpdateView(props: Props) {\n  const [params] = useSearchParams();\n  const [preview, setPreview] = React.useState<boolean>(true);\n  const { site } = React.useContext(SharedDataCtx);\n  const settingSlug = site.settings;\n\n  const { res, updateData } = useRequest(() => Setting({ slug: settingSlug }).retrieve(), {\n    refreshDeps: [settingSlug],\n  });\n\n  if (!res || !res.data) return null;\n\n  const instance = Setting(res.data);\n  const tab = params.get('tab');\n\n  const PreviewButton = <Button onClick={() => setPreview(!preview)}>Preview</Button>;\n\n  switch (tab) {\n    case 'privacy':\n      return (\n        <View back=\"../\">\n          <StaffSection title=\"Privacy policy\"></StaffSection>\n        </View>\n      );\n\n    case 'terms':\n      return (\n        <View back=\"../\">\n          <StaffSection title=\"Terms and conditions\"></StaffSection>\n        </View>\n      );\n\n    default:\n      return (\n        <View back=\"../\">\n          <StaffSection title=\"About\" actions={PreviewButton}>\n            <SettingPagesUpdateForm {...{ instance, preview }} fields={['about']} />\n          </StaffSection>\n        </View>\n      );\n  }\n}\n\ntype ViewProps = { children: React.ReactNode; back?: string };\n\nconst View = ({ children, ...props }: ViewProps) => (\n  <StaffView title=\"Pages\" {...props}>\n    <StaffSection\n      children={children}\n      header={\n        <div className=\"d-flex align-items-center border-bottom pb-2 mb-2\">\n          <QueryButton index target=\"tab\" className=\"me-1\">\n            About\n          </QueryButton>\n          <QueryButton target=\"tab\" value=\"privacy\" className=\"me-1\">\n            Privacy\n          </QueryButton>\n          <QueryButton target=\"tab\" value=\"terms\" className=\"me-1\">\n            Terms\n          </QueryButton>\n          <QueryButton target=\"tab\" value=\"faq\">\n            Faq\n          </QueryButton>\n        </div>\n      }\n    />\n  </StaffView>\n);\n\ntype SettingPagesUpdateFormProps = Props & { instance: TSettingInstance; fields: string[]; preview: boolean };\n\nconst SettingPagesUpdateForm = ({ instance, fields, preview, ...props }: SettingPagesUpdateFormProps) => {\n  const form = useForm({ about: instance?.about || '' });\n\n  if (preview) return <div dangerouslySetInnerHTML={{ __html: form.values.about || 'Nothing to preview ...' }} />;\n\n  const hasField = (name: string) => fields.includes(`${name}`);\n\n  return (\n    <Form\n      context={form}\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        return instance\n          .updatePages(form.values)\n          .then((r) => {})\n          .catch((e) => {});\n      }}\n    >\n      {hasField('about') && (\n        <Form.Field>\n          <Form.TextAreaX name=\"about\" mirror={form.values.about} />\n        </Form.Field>\n      )}\n      <div className=\"my-3\">\n        <Form.Submit value={'Update'} />\n      </div>\n    </Form>\n  );\n};\n"],"names":["SettingService","values","this","patch","_path","StaffService","Setting","data","StaffModel","Index","PagesSettingUpdateView","props","useSearchParams","params","React","preview","setPreview","settingSlug","SharedDataCtx","site","settings","useRequest","slug","retrieve","refreshDeps","res","updateData","instance","tab","get","PreviewButton","onClick","View","back","title","actions","SettingPagesUpdateForm","fields","children","header","className","index","target","value","form","useForm","about","dangerouslySetInnerHTML","__html","name","context","onSubmit","e","preventDefault","updatePages","then","r","catch","includes","mirror"],"sourceRoot":""}