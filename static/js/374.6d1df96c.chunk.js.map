{"version":3,"file":"static/js/374.6d1df96c.chunk.js","mappings":"0RASaA,EAAqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAASC,GAAZ,mBAChC,SAAC,WAAD,kBACMA,GADN,IAEEC,GAAE,wCAA4BF,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAMG,KAAlC,KACFC,cAAe,CAAC,yBAChBC,WAAWC,EAAAA,EAAAA,IAAM,CAAC,uBAAwBL,EAAMI,YAChDE,MAAM,oBANwB,ECDrBC,EAET,SAACP,GACH,IAAQQ,EAAwCR,EAAxCQ,SAAUC,EAA8BT,EAA9BS,UAAWC,EAAmBV,EAAnBU,QAASC,EAAUX,EAAVW,MAiBtC,OACE,UAAC,KAAD,CAEEL,MAAOE,EAASI,WAAa,uBAAyB,6BACtDC,aAAc,kBAAM,gDAAN,EACdC,aAAc,gBAAGC,EAAH,EAAGA,QAAH,OACZ,iBAAKX,UAAU,oDAAf,WACE,SAAC,KAAD,CAAQY,QAAS,kBAAMD,GAAQ,EAAd,EAAjB,sBAEA,SAAC,YAAD,CACEC,QAAS,kBAzBE,SAACD,GAGpBP,EACGS,UACAC,MAAK,SAACC,GACE,OAAPJ,QAAO,IAAPA,GAAAA,GAAU,GACD,OAATN,QAAS,IAATA,GAAAA,EAAYU,EACb,IACAC,OAAM,SAACC,GACC,OAAPN,QAAO,IAAPA,GAAAA,GAAU,GACH,OAAPL,QAAO,IAAPA,GAAAA,EAAUW,EACX,GACJ,CAYwBC,CAAaP,EAAnB,EACTX,UAAU,aACVD,cAAe,CAAC,yBAHlB,yBAJU,EAadoB,OAAQ,kBAAM,gBAAKnB,UAAU,MAAf,4CAAN,EACRA,UAAU,2CAlBZ,WAoBE,SAAC,QAAD,IACCO,IAAS,iBAAMP,UAAU,QAAhB,SAAyBO,MAGxC,ECjCc,SAASa,IACtB,MAKIC,EAAAA,WAA4EC,EAAAA,IALhF,IACEC,UAAAA,OADF,MACc,GADd,EAEEC,EAFF,EAEEA,WACAC,EAHF,EAGEA,SACAC,EAJF,EAIEA,UAGF,OAAKD,GAGH,SAAC,UAAD,CACEvB,MAAM,UACNyB,KAAK,gBACL3B,UAAU,iCACV4B,SAAS,gBACTC,OACEL,IACE,0BACE,SAAC,MAAD,kBAAgBA,GAAhB,IAA4BM,UAAWC,EAAAA,GAAAA,KAAYlC,IAAE,OAR7D,UAaE,gBAAKG,UAAU,SAAf,gBACGuB,QADH,IACGA,OADH,EACGA,EAAWS,KAAI,SAACrC,GAAD,OACd,SAACsC,EAAD,CACEtC,KAAMA,EACNuC,WAAY,kBACVR,EACE,YACAH,EAAUY,QAAO,SAACC,GAAD,OAAOA,EAAEtC,QAAF,OAAWH,QAAX,IAAWA,OAAX,EAAWA,EAAMG,KAAxB,IAHT,IAMPuC,EAAAA,EAAAA,MATO,SAjBA,SAAC,KAAD,GAgCvB,CAED,IAAMJ,EAAmB,SAAC,GAA2E,IAAD,EAAxEtC,EAAwE,EAAxEA,KAAMuC,EAAkE,EAAlEA,WAChC,OACE,SAAC,KAAD,CACEI,QAAM,EACNpC,OACE,4BACE,SAAC,IAAD,CAAcP,KAAMA,KACpB,iBAAKK,UAAU,qBAAf,WACE,kBAAMA,UAAU,GAAGE,MAAM,cAAzB,oBACGP,EAAK4C,aADR,QACiB,IACd,UAEH,kBAAMvC,UAAU,GAAGE,MAAM,eAAzB,UACGP,EAAK6C,aADR,qBASNC,SACE,iBAAKzC,UAAU,SAAf,WACE,SAACG,EAAD,CAAsBC,UAAUsC,EAAAA,EAAAA,GAAS/C,GAAOU,UAAW6B,KAC3D,SAACxC,EAAD,CAAoBC,KAAMA,EAAMK,UAAU,oCAA1C,UACE,SAAC,QAAD,SAINA,UAAU,kBAGf,C","sources":["../../../../shopy/shopy-salejs/src/customer/links.tsx","../../../../shopy/shopy-salejs/src/customer/buttons.tsx","../../../../shopy/shopy-salejs/src/customer/views.List.tsx"],"sourcesContent":["import * as React from 'react';\nimport { LinkProps } from 'react-router-dom';\n\nimport { TCustomer, TCustomerInstance } from './utils';\nimport Staff from '@miq/staffjs';\nimport { getCN } from '@miq/utiljs';\n\ntype TCustomerOrInstance = TCustomer | TCustomerInstance;\n\nexport const CustomerUpdateLink = ({ data, ...props }: { data: TCustomerOrInstance } & Omit<LinkProps, 'to'>) => (\n  <Staff.Link\n    {...props}\n    to={`/staff/sales/customers/${data?.slug}/`}\n    requiredPerms={['sales.change_customer']}\n    className={getCN(['customer-update-link', props.className])}\n    title=\"Update customer\"\n  />\n);\n","import * as React from 'react';\n\nimport type { TCustomerInstance } from './utils';\n\nimport Staff from '@miq/staffjs';\nimport { TFormUpdateProps } from '@miq/formjs';\nimport { Button, ConfirmButton, Icons } from '@miq/componentjs';\n\nexport const CustomerDeleteButton: React.FC<\n  Omit<TFormUpdateProps<{ label?: string; instance: TCustomerInstance }>, 'context'>\n> = (props) => {\n  const { instance, onSuccess, onError, label } = props;\n\n  const handleDelete = (setOpen: any) => {\n    // if (!instance.canDestroy) return;\n\n    instance\n      .destroy()\n      .then((res) => {\n        setOpen?.(false);\n        onSuccess?.(res);\n      })\n      .catch((err: any) => {\n        setOpen?.(false);\n        onError?.(err);\n      });\n  };\n\n  return (\n    <ConfirmButton\n      // disabled={!instance.canDestroy}\n      title={instance.canDestroy ? 'Delete this customer' : \"Can't delete this customer\"}\n      renderHeader={() => <div>Supprimer ce client</div>}\n      renderFooter={({ setOpen }) => (\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Button onClick={() => setOpen(false)}>Annuler</Button>\n\n          <Staff.Button\n            onClick={() => handleDelete(setOpen)}\n            className=\"btn-danger\"\n            requiredPerms={['sales.delete_customer']}\n          >\n            Supprimer\n          </Staff.Button>\n        </div>\n      )}\n      render={() => <div className=\"p-3\">Veuillez confirmer cette action</div>}\n      className=\"btn-round cus-delete-button btn-danger-3\"\n    >\n      <Icons.Trash />\n      {label && <span className=\"label\">{label}</span>}\n    </ConfirmButton>\n  );\n};\n","import * as React from 'react';\n\nimport { Customer, TCustomer } from './utils';\nimport type { TSDState } from '@miq/contextjs';\n\nimport Staff from '@miq/staffjs';\nimport { uuid } from '@miq/utiljs';\nimport { SharedDataCtx } from '@miq/contextjs';\nimport { Icons, Loading, Pagination, ViewSection } from '@miq/componentjs';\n\nimport { CustomerCard } from './components';\nimport { CustomerUpdateLink } from './links';\nimport { CustomerDeleteButton } from './buttons';\n\ntype TCustomerItem = {\n  slug: TCustomer['slug'];\n  name: TCustomer['name'];\n  orders_count: TCustomer['orders_count'];\n};\n\nexport default function CustomerListView() {\n  const {\n    customers = [],\n    pagination,\n    isLoaded,\n    updateKey,\n  } = React.useContext<TSDState<{ customers: TCustomerItem[]; pagination: any }>>(SharedDataCtx);\n\n  if (!isLoaded) return <Loading />;\n\n  return (\n    <Staff.View\n      title=\"Clients\"\n      back=\"/staff/sales/\"\n      className=\"sales-index-view miq-container\"\n      headerCN=\"miq-container\"\n      footer={\n        pagination && (\n          <div>\n            <Pagination {...pagination} component={Staff.Link} to />\n          </div>\n        )\n      }\n    >\n      <div className=\"d-grid\">\n        {customers?.map((data) => (\n          <CustomerListItem\n            data={data}\n            removeItem={() =>\n              updateKey(\n                'customers',\n                customers.filter((i) => i.slug !== data?.slug)\n              )\n            }\n            key={uuid()}\n          />\n        ))}\n      </div>\n    </Staff.View>\n  );\n}\n\nconst CustomerListItem = ({ data, removeItem }: { data: TCustomerItem; removeItem: () => void }) => {\n  return (\n    <ViewSection\n      border\n      title={\n        <div>\n          <CustomerCard data={data} />\n          <div className=\"text-muted text-sm\">\n            <span className=\"\" title=\"Total spent\">\n              {data.spent ?? '_'}\n              {' / '}\n            </span>\n            <span className=\"\" title=\"Total orders\">\n              {data.orders_count} order(s)\n            </span>\n          </div>\n        </div>\n      }\n      // text={\n\n      // }\n      actions={\n        <div className=\"d-flex\">\n          <CustomerDeleteButton instance={Customer(data)} onSuccess={removeItem} />\n          <CustomerUpdateLink data={data} className=\"btn btn-primary-3 btn-square ms-1\">\n            <Icons.Edit />\n          </CustomerUpdateLink>\n        </div>\n      }\n      className=\"cust-list-item\"\n    />\n  );\n};\n"],"names":["CustomerUpdateLink","data","props","to","slug","requiredPerms","className","getCN","title","CustomerDeleteButton","instance","onSuccess","onError","label","canDestroy","renderHeader","renderFooter","setOpen","onClick","destroy","then","res","catch","err","handleDelete","render","CustomerListView","React","SharedDataCtx","customers","pagination","isLoaded","updateKey","back","headerCN","footer","component","Staff","map","CustomerListItem","removeItem","filter","i","uuid","border","spent","orders_count","actions","Customer"],"sourceRoot":""}