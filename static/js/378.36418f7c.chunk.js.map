{"version":3,"file":"static/js/378.36418f7c.chunk.js","mappings":"2SAWe,SAASA,IAAiB,IAAD,IAC9BC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAiBE,EAAAA,EAAAA,MAAVC,GAAP,eACMC,GAAOC,EAAAA,EAAAA,IAAc,IAErBC,GAAY,OAAIH,EAAOI,QAAQC,OAErC,GAA6CC,EAAAA,EAAAA,KAAW,kBAAMC,EAAAA,EAAAA,GAAI,CAAEC,KAAMX,IAAWY,QAAQT,KAAS,CACpGU,YAAa,CAACb,EAASM,GACvBQ,UAAW,YAAc,EAAXC,MACdC,QAAS,YAAkB,EAAfC,YAHDC,EAAb,EAAQC,IAAsBC,EAA9B,EAAqBC,QAMbF,GAAQV,EAAAA,EAAAA,KAAW,kBAAMC,EAAAA,EAAAA,GAAI,CAAEC,KAAMX,IAAWsB,aAAY,CAClET,YAAa,CAACb,GACdc,UAAW,gBAAGC,EAAH,EAAGA,KAAH,OAAcX,EAAKmB,UAAUR,IACxCC,QAAS,YAAkB,EAAfC,YAHNE,IAMFK,EAAI,IAAIC,EAAAA,GAAeN,GAC7B,IAAKK,EAAEE,UAAW,OAAO,KAEzB,IAAIC,GAAWjB,EAAAA,EAAAA,GAAIc,EAAET,MACba,EAASD,EAATC,KAER,OACE,UAAC,IAAD,CAAWC,KAAK,MAAMC,MAAOH,EAASC,KAAMG,KAAI,YAAOH,EAAP,KAAhD,WACE,oBAGA,gBAAKI,UAAU,GAAf,SACGZ,GACC,SAAC,KAAD,IADS,UAGT,IAAIK,EAAAA,GAAeP,UAHV,iBAGT,EAA4Be,aAHnB,aAGT,EAAmCC,KAAI,SAACC,GAAD,OAAS,SAAC,EAAAC,YAAD,CAAaD,IAAKA,EAAKH,UAAU,QAAYG,EAAIxB","sources":["../../../../packages/miq-staffjs/src/analytics/libs/views.Update.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useForm } from '@miq/formjs';\nimport { useRequest } from '@miq/hookjs';\nimport { Response } from '@miq/utiljs';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport StaffView from '../../Views';\nimport { LIB, TLIB } from './utils';\nimport { HitListItem, THit } from '../hits';\nimport { Loading } from '@miq/componentjs';\n\nexport default function LIBUpdateView() {\n  const { libSlug } = useParams();\n  const [params] = useSearchParams();\n  const form = useForm<TLIB>({});\n\n  const paramSize = [...params.keys()].length;\n\n  const { res: hitRes, loading: hitLoading } = useRequest(() => LIB({ slug: libSlug }).hitList(params), {\n    refreshDeps: [libSlug, paramSize],\n    onSuccess: ({ data }) => {},\n    onError: ({ response }) => {},\n  });\n\n  const { res } = useRequest(() => LIB({ slug: libSlug }).retrieve(), {\n    refreshDeps: [libSlug],\n    onSuccess: ({ data }) => form.setValues(data),\n    onError: ({ response }) => {},\n  });\n\n  const r = new Response<TLIB>(res);\n  if (!r.isSuccess) return null;\n\n  let instance = LIB(r.data);\n  const { name } = instance;\n\n  return (\n    <StaffView back=\"../\" title={instance.name} text={`p/${name}/`}>\n      <div></div>\n\n      {/* <LibHitList response={new Response<THit>(hitRes)} /> */}\n      <div className=\"\">\n        {hitLoading ? (\n          <Loading />\n        ) : (\n          new Response<THit>(hitRes)?.items?.map((hit) => <HitListItem hit={hit} className=\"mb-2\" key={hit.slug} />)\n        )}\n      </div>\n    </StaffView>\n  );\n}\n"],"names":["LIBUpdateView","libSlug","useParams","useSearchParams","params","form","useForm","paramSize","keys","length","useRequest","LIB","slug","hitList","refreshDeps","onSuccess","data","onError","response","hitRes","res","hitLoading","loading","retrieve","setValues","r","Response","isSuccess","instance","name","back","title","text","className","items","map","hit","HitListItem"],"sourceRoot":""}