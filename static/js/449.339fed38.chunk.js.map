{"version":3,"file":"static/js/449.339fed38.chunk.js","mappings":"mQAaMA,EAAa,SAACC,GAAmC,IAAD,EAClCC,EAAMD,EAAhBE,SAER,OAAKD,EAAEE,WAGL,gCACGF,QADH,IACGA,GADH,UACGA,EAAGG,aADN,aACG,EAAUC,KAAI,SAACC,GACd,OACE,gBAAKC,UAAU,eAAf,UACE,iBAAKA,UAAU,SAAf,WACE,gBAAKC,MAAO,CAAEC,MAAO,GAAIC,SAAU,IAAnC,UACE,SAAC,KAAD,CAAQC,IAAKL,OAGf,iBAAKC,UAAU,cAAf,WACE,iBAAKA,UAAU,gBAAf,WACE,SAAC,KAAD,CAAeI,IAAKL,EAAQC,UAAU,UACtC,SAAC,KAAD,CAAeI,IAAKL,EAAQC,UAAU,uBACtC,gBAAKA,UAAU,aAAaK,MAAON,EAAKO,WAAxC,UACGC,EAAAA,EAAAA,IAAYR,EAAKO,WAAY,EAAG,UAIrC,gBAAKN,UAAU,GAAf,UACE,SAAC,KAAD,CAAYI,IAAKL,cAhBUS,EAAAA,EAAAA,YANlB,MAiCZ,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAOC,EAAAA,EAAAA,IAAc,IAEdC,GAAWC,EAAAA,EAAAA,KAAW,kBAAMC,EAAAA,EAAAA,IAAI,CAAEC,KAAMP,IAAWQ,YAAW,CACzEC,YAAa,CAACT,GACdU,UAAW,YAAc,EAAXC,MACdC,QAAS,YAAkB,EAAf3B,YAHN4B,IAMAA,GAAQR,EAAAA,EAAAA,KAAW,kBAAMC,EAAAA,EAAAA,IAAI,CAAEC,KAAMP,IAAWc,aAAY,CAClEL,YAAa,CAACT,GACdU,UAAW,gBAAGC,EAAH,EAAGA,KAAH,OAAcT,EAAKa,UAAUJ,IACxCC,QAAS,YAAkB,EAAf3B,YAHN4B,IAMF7B,EAAI,IAAIgC,EAAAA,GAASH,GACvB,IAAK7B,EAAEE,UAAW,OAAO,KAEzB,IAAI+B,GAAWX,EAAAA,EAAAA,IAAItB,EAAE2B,MACbO,EAASD,EAATC,KAER,OACE,UAAC,IAAD,CAAWC,KAAK,MAAMxB,MAAOsB,EAASC,KAAME,KAAI,YAAOF,EAAP,KAAhD,WACE,oBAEA,SAACpC,EAAD,CAAYG,SAAU,IAAI+B,EAAAA,GAAeZ","sources":["../../../../packages/miq-staffjs/src/analytics/views.LIBUpdate.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport { Response, truncateStr, uuid } from '@miq/utiljs';\n\nimport StaffView from '../Views';\n\nimport { THit, TLIB } from './types';\nimport { useForm } from '@miq/formjs';\nimport { useRequest } from '@miq/hookjs';\nimport { LIB } from './models';\nimport { HitCart, HitImg, HitQueries, HitUser } from './components';\n\nconst LibHitList = (props: { response: Response }) => {\n  const { response: r } = props;\n\n  if (!r.isSuccess) return null;\n\n  return (\n    <div>\n      {r?.items?.map((item) => {\n        return (\n          <div className=\"mb-2 text-sm\" key={uuid()}>\n            <div className=\"d-flex\">\n              <div style={{ width: 48, minWidth: 48 }}>\n                <HitImg hit={item} />\n              </div>\n\n              <div className=\"d-grid ms-1\">\n                <div className=\"text-ellipsis\">\n                  <HitUser {...{ hit: item }} className=\"me-1\" />\n                  <HitCart {...{ hit: item }} className=\"me-1 bg-green-100\" />\n                  <div className=\"text-muted\" title={item.user_agent}>\n                    {truncateStr(item.user_agent, 0, 45)}\n                  </div>\n                </div>\n\n                <div className=\"\">\n                  <HitQueries hit={item} />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default function LIBUpdateView() {\n  const { libSlug } = useParams();\n  const form = useForm<TLIB>({});\n\n  const { res: hitRes } = useRequest(() => LIB({ slug: libSlug }).hitList(), {\n    refreshDeps: [libSlug],\n    onSuccess: ({ data }) => {},\n    onError: ({ response }) => {},\n  });\n\n  const { res } = useRequest(() => LIB({ slug: libSlug }).retrieve(), {\n    refreshDeps: [libSlug],\n    onSuccess: ({ data }) => form.setValues(data),\n    onError: ({ response }) => {},\n  });\n\n  const r = new Response(res);\n  if (!r.isSuccess) return null;\n\n  let instance = LIB(r.data);\n  const { name } = instance;\n\n  return (\n    <StaffView back=\"../\" title={instance.name} text={`p/${name}/`}>\n      <div></div>\n\n      <LibHitList response={new Response<THit>(hitRes)} />\n    </StaffView>\n  );\n}\n"],"names":["LibHitList","props","r","response","isSuccess","items","map","item","className","style","width","minWidth","hit","title","user_agent","truncateStr","uuid","LIBUpdateView","libSlug","useParams","form","useForm","hitRes","useRequest","LIB","slug","hitList","refreshDeps","onSuccess","data","onError","res","retrieve","setValues","Response","instance","name","back","text"],"sourceRoot":""}