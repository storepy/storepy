{"version":3,"file":"static/js/470.c9fa7354.chunk.js","mappings":"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","sources":["../../../../shopy/shopy-salejs/src/cart/models.tsx","../../../../shopy/shopy-salejs/src/cart/views.Create.tsx","../../../../shopy/shopy-salejs/src/customer/components.tsx","../../../../shopy/shopy-salejs/src/customer/forms/index.tsx","../../../../shopy/shopy-salejs/src/customer/index.tsx"],"sourcesContent":["import { StaffModel, StaffService } from '@miq/staffjs';\nimport { TCart } from './types';\n\nconst timeout = 5000;\n\n/**\n * CART\n */\n\nclass CartService extends StaffService<TCart> {\n  get canDestroy(): boolean {\n    return this?.data?.products?.length === 0;\n  }\n  addItems(values: { size: string; quantity: number; product_slug: string }[]) {\n    return this.post(`${this._path}products/`, values);\n  }\n\n  addItem(prodSlug: string, values: { size: string; quantity: number }) {\n    return this.post(`${this._path}product/${prodSlug}/`, values);\n  }\n\n  updateItem(prodSlug: string, values: Record<string, any>) {\n    return this.post(`${this._path}item/${prodSlug}/`, { ...values }, { timeout });\n  }\n\n  destroyItem(itemSlug: string) {\n    return this.delete(`${this._path}item/${itemSlug}/`, { timeout });\n  }\n}\n\nexport const Cart = (data: TCart = {}) => {\n  return StaffModel<TCart, CartService>(data, 'carts', CartService);\n};\n\nexport type TCartInstance = ReturnType<typeof Cart>;\n\n// export const Cart = (data: any) => {\n//   getIsValid(data: Record<string, any>): boolean {\n//     return data && data.slug && data.products && Boolean(data.items.length);\n//   }\n\n//   getItem(meta_slug: string) {\n//     return;\n//     // return this.items?.find((i: any) => i.product.meta_slug === meta_slug);\n//   }\n\n//   postItem(prod_meta_slug: string, values: any) {\n//     // values may contain size and other info\n\n//     if (this.slug && values) values.cart_slug = this.slug;\n//     return this.postPath(`${this._endpoint}items/`, { ...values, prod_meta_slug });\n//   }\n\n//   patchItem(itemSlug: string, values: any) {\n//     return this.patchPath(`${this._path}/item/${itemSlug}/`, values);\n//   }\n//   deleteItem(itemSlug: string) {\n//     return this.deletePath(`${this._path}/item/${itemSlug}/`);\n//   }\n\n//   patchCustomer(values: any) {\n//     if (values && this?.customer?.slug) values.cust_slug = this.customer.slug;\n//     return this.patchPath(`${this._path}/customer/`, values);\n//   }\n//   postCustomer(values: any) {\n//     return this._s.post(`${this._path}/customer/`, values);\n//   }\n// }\n\n// //   const methods = {\n// //     getItem,\n// //     postItem,\n// //     patchItem,\n// //     deleteItem,\n// //     patchCustomer,\n// //     postCustomer,\n// //   };\n\n// //   return Object.assign({ isValid: getIsValid() }, CrudModel(data, 'api/carts/'), methods);\n// // };\n\n// export const Customer = (data: any) => {\n//   // return Object.assign({}, CrudModel(data, 'api/carts/'), methods);\n// };\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport Staff from '@miq/staffjs';\n\nimport { Cart } from './models';\nimport { Button, Icons } from '@miq/componentjs';\n\nimport { TCustomer, CustomerForm, CustomerCard } from '../customer';\nimport { useDocumentTitle } from '@miq/hookjs';\n\nexport default function CartCreateView() {\n  useDocumentTitle('Add cart - Sales');\n  const navigate = useNavigate();\n  const [customer, setCustomer] = React.useState<TCustomer>();\n\n  const createCart = (customer: TCustomer) => {\n    Cart()\n      .create({ customer: customer.slug })\n      .then(({ data }) => {\n        return navigate(`${data.slug}/`);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <Staff.View title=\"Ajouter une commande\" back=\"/staff/sales/\">\n      <div className=\"d-flex justify-content-center my-3\">\n        <div className=\"w-md-65\">\n          <Staff.Section title=\"Client\" text=\"Selectionez ou ajoutez un noubeau client\" headerCN=\"mb-4\">\n            {customer && customer.slug ? (\n              <div className=\"\">\n                <CustomerCard data={customer} />\n\n                <div className=\"d-flex justify-content-between mt-4\">\n                  <Button className=\"btn btn-round\" onClick={() => setCustomer(undefined)}>\n                    <Icons.ArrowLeft />\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      createCart(customer);\n                    }}\n                    className=\"btn btn-primary-3\"\n                  >{`Continuer »`}</Button>\n                </div>\n              </div>\n            ) : (\n              <CustomerForm\n                fields={['first_name', 'last_name', 'phone', 'email']}\n                onSuccess={({ data }) => {}}\n                onCustomerSelect={setCustomer}\n              >\n                <div className=\"d-flex justify-content-center my-4\">\n                  <Button type=\"submit\" className=\"btn btn-md btn-primary fw-bold\">\n                    {`Continuer »`}\n                  </Button>\n                </div>\n              </CustomerForm>\n            )}\n          </Staff.Section>\n        </div>\n      </div>\n    </Staff.View>\n  );\n}\n","import * as React from 'react';\n\nimport { TCustomer } from './types';\n\nexport const CustomerCard = ({ data, ...props }: { data: TCustomer }) => {\n  if (!data || !data.slug) return null;\n\n  const { first_name, last_name, email, phone } = data;\n\n  return (\n    <div className=\"customer-card\">\n      <div className=\"fw-bold\">{`${first_name} ${last_name}`}</div>\n      <div className=\"\">{phone}</div>\n      <div className=\"text-muted text-sm\">{email}</div>\n    </div>\n  );\n};\n","import * as React from 'react';\n\nimport Form, { IFormUpdateProps, useForm } from '@miq/formjs';\nimport { TCustomer } from '../types';\nimport { TCustomerInstance } from '../../cart/models';\nimport { CustomerEmailField, CustomerFNameField, CustomerLNameField, CustomerPhoneField } from './fields';\n\ntype TFormUpdateProps<T, I> = IFormUpdateProps<T> & {\n  fields: string[];\n  instance?: I;\n};\n\ntype TCustomerFormProps = Omit<TFormUpdateProps<TCustomer, TCustomerInstance>, 'context'> & {\n  onCustomerSelect?: (p: TCustomer) => void;\n};\n\nexport const CustomerForm = ({\n  children,\n  instance,\n  onSuccess,\n  onError,\n  onCustomerSelect,\n  ...props\n}: TCustomerFormProps) => {\n  const { fields } = props;\n  const form = useForm<TCustomer>(getCustomerFD(instance?.export(), fields));\n\n  const { errors } = form;\n  const sharedProps = { className: 'span-md-3', fieldCN: 'd-grid grid-md-5' };\n\n  return (\n    <Form {...props} context={form} className=\"customer-form\">\n      <div className=\"base-fields\">\n        {fields?.includes('last_name') && (\n          <CustomerLNameField\n            allowSuggestions\n            error={errors.last_name}\n            {...sharedProps}\n            onCustomerSelect={onCustomerSelect}\n            className=\"\"\n          />\n        )}\n\n        {fields?.includes('first_name') && <CustomerFNameField error={errors.first_name} {...sharedProps} />}\n\n        {fields?.includes('phone') && <CustomerPhoneField error={errors.phone} {...sharedProps} />}\n        {fields?.includes('email') && <CustomerEmailField error={errors.email} {...sharedProps} />}\n      </div>\n\n      {children}\n    </Form>\n  );\n};\nconst getCustomerFD = (data?: TCustomer, fields?: string[]) => {\n  if (!data) data = { first_name: '', last_name: '', email: '', phone: '' };\n  const fd: TCustomer = {};\n  fields?.forEach((field) => {\n    fd[field] = data![field];\n  });\n\n  return fd;\n};\n\nconst CustomerSearchInput = (props) => {\n  return <Form.Text {...props} />;\n};\n","import * as React from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\nconst CustomerCreateView = React.lazy(() => import('./views.Create'));\nconst CustomerUpdateView = React.lazy(() => import('./views.Update'));\nconst CustomerListView = React.lazy(() => import('./views.List'));\n\nexport default function CustomerRoutes() {\n  return (\n    <Routes>\n      <Route path=\":custSlug/\" element={<CustomerUpdateView />} />\n      <Route path=\"new/\" element={<CustomerCreateView />} />\n      <Route index element={<CustomerListView />} />\n    </Routes>\n  );\n}\n\nexport * from './types';\nexport * from './components';\nexport { CustomerForm } from './forms';\n"],"names":["CartService","this","data","products","length","values","post","_path","prodSlug","timeout","itemSlug","delete","StaffService","Cart","StaffModel","CartCreateView","useDocumentTitle","navigate","useNavigate","React","customer","setCustomer","title","back","className","text","headerCN","slug","CustomerCard","onClick","undefined","create","then","catch","err","console","log","createCart","CustomerForm","fields","onSuccess","onCustomerSelect","type","first_name","last_name","email","phone","children","instance","onError","props","form","useForm","getCustomerFD","export","errors","sharedProps","fieldCN","context","includes","allowSuggestions","error","fd","forEach","field","CustomerCreateView","CustomerUpdateView","CustomerListView","CustomerRoutes","path","element","index"],"sourceRoot":""}