{"version":3,"file":"static/js/570.5acb6749.chunk.js","mappings":"gRAce,SAASA,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAOC,EAAAA,EAAAA,KAAwBC,EAAAA,EAAAA,oBAE7BC,EAAcH,EAAdG,UACR,GAIIC,EAAAA,EAAAA,KAAW,kBAAMC,EAAAA,EAAAA,GAAc,CAAEC,KAAMR,IAAWS,UAAvC,GAAmD,CAChEC,YAAa,CAACV,GACdW,UAAW,SAACC,GAAD,OAASP,GAAUD,EAAAA,EAAAA,iBAAgBQ,EAAIC,MAAvC,IALXD,EADF,EACEA,IAQIE,EAAI,IAAIC,EAAAA,GAASH,GACvB,IAAKE,EAAEE,UAAW,OAAO,KAEzB,IAAMC,GAAWV,EAAAA,EAAAA,GAAcO,EAAED,MAEjC,OACE,SAAC,UAAD,CAAYK,MAAK,UAAKD,EAASE,KAAd,iBAAmCC,KAAI,8BAAyBpB,EAAzB,KAAxD,UACE,SAAC,KAAD,CAA+BiB,SAAAA,EAAUI,QAASnB,EAAMoB,OAAQ,CAAC,UAAW,WAAY,aAAc,SAAtG,UACE,UAAC,KAAD,CAAaC,QAAM,EAACC,QAAQ,SAAC,YAAD,CAAaC,MAAM,cAAcC,UAAU,kBAAvE,WACE,SAAC,iBAAD,CAA+BC,MAAOzB,EAAK0B,OAAOC,QAASH,UAAU,SACpExB,EAAK4B,OAAOD,UACX,iCACE,SAAC,kBAAD,CAAgCE,SAAU7B,EAAK4B,OAAOD,QAASF,MAAOzB,EAAK0B,OAAOI,YAClF,SAAC,oBAAD,CAAkCD,SAAU7B,EAAK4B,OAAOD,QAASF,MAAOzB,EAAK0B,OAAOK,iBAIxF,SAAC,sBAAD,CAA0CC,OAAQpB,EAAED,KAAKqB,eAKlE,C","sources":["../../../../shopy/shopy-storejs/src/supplier/views.OrderSettingUpdate.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Staff from '@miq/staffjs';\n\nimport { useRequest, Response } from '@miq/hookjs';\nimport Form, { useForm } from '@miq/formjs';\nimport { ViewSection } from '@miq/componentjs';\n\nimport { TSupplierOrder } from '../types';\nimport { SupplierOrder } from './models';\nimport { mapDataToValues } from './views.OrderUpdate';\nimport { SupplierOrderForm, SupplierOrderUpdateForm } from './forms';\n\nexport default function OrderSettingUpdateView() {\n  const { ordSlug } = useParams();\n  const form = useForm<TSupplierOrder>(mapDataToValues());\n\n  const { setValues } = form;\n  const {\n    res,\n    // setRes: setOrder,\n    // refresh: refreshOrder,\n  } = useRequest(() => SupplierOrder({ slug: ordSlug }).retrieve(), {\n    refreshDeps: [ordSlug],\n    onSuccess: (res) => setValues(mapDataToValues(res.data)),\n  });\n\n  const r = new Response(res);\n  if (!r.isSuccess) return null;\n\n  const instance = SupplierOrder(r.data);\n\n  return (\n    <Staff.View title={`${instance.name} Order Update`} back={`/staff/store/orders/${ordSlug}/`}>\n      <SupplierOrderUpdateForm {...{ instance, context: form, fields: ['is_paid', 'order_id', 'total_cost', 'stage'] }}>\n        <ViewSection border footer={<Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3\" />}>\n          <SupplierOrderForm.IsPaidField error={form.errors.is_paid} className=\"my-2\" />\n          {form.values.is_paid && (\n            <>\n              <SupplierOrderForm.OrderIDField required={form.values.is_paid} error={form.errors.order_id} />\n              <SupplierOrderForm.TotalCostField required={form.values.is_paid} error={form.errors.total_cost} />\n            </>\n          )}\n\n          <SupplierOrderForm.StageSelectField {...{ stages: r.data.stages }} />\n        </ViewSection>\n      </SupplierOrderUpdateForm>\n    </Staff.View>\n  );\n}\n"],"names":["OrderSettingUpdateView","ordSlug","useParams","form","useForm","mapDataToValues","setValues","useRequest","SupplierOrder","slug","retrieve","refreshDeps","onSuccess","res","data","r","Response","isSuccess","instance","title","name","back","context","fields","border","footer","value","className","error","errors","is_paid","values","required","order_id","total_cost","stages"],"sourceRoot":""}