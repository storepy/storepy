{"version":3,"file":"static/js/577.9674a928.chunk.js","mappings":"0NAKMA,EAAU,IAuEVC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAuBH,OAvBGA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,aAAAA,IACJ,WAA2B,IAAD,IACxB,OAAwC,KAAjC,OAAAC,WAAA,IAAAA,MAAA,UAAAA,KAAMC,YAAN,mBAAYC,gBAAZ,eAAsBC,OAC9B,sBAED,WACE,OAAOH,KAAKI,KAAL,UAAaJ,KAAKK,MAAlB,UAAiC,CAAC,EAAG,CAAEP,QAAAA,GAC/C,yBAED,SAASQ,GACP,OAAON,KAAKI,KAAL,UAAaJ,KAAKK,MAAlB,aAAoCC,EAC5C,wBAED,SAAQC,EAAkBD,GACxB,OAAON,KAAKI,KAAL,UAAaJ,KAAKK,MAAlB,mBAAkCE,EAAlC,KAA+CD,EACvD,2BAED,SAAWC,EAAkBD,GAC3B,OAAON,KAAKI,KAAL,UAAaJ,KAAKK,MAAlB,gBAA+BE,EAA/B,gBAAiDD,GAAU,CAAER,QAAAA,GACrE,4BAED,SAAYU,GACV,OAAOR,KAAKS,OAAL,UAAeT,KAAKK,MAApB,gBAAiCG,EAAjC,KAA8C,CAAEV,QAAAA,GACxD,OAvBGC,CAAoBW,EAAAA,IA0BbC,GAAOC,EAAAA,EAAAA,IAAkC,QAASb,E,iKC3FhD,SAASc,KACtBC,EAAAA,EAAAA,IAAiB,oBACjB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,EAAgCC,EAAAA,WAAhC,eAAOC,EAAP,KAAiBC,EAAjB,KAaA,OACE,SAAC,UAAD,CAAYC,MAAM,uBAAuBC,KAAK,gBAA9C,UACE,gBAAKC,UAAU,qCAAf,UACE,gBAAKA,UAAU,UAAf,UACE,SAAC,aAAD,CAAeF,MAAM,SAASG,KAAK,2CAA2CC,SAAS,OAAvF,SACGN,GAAYA,EAASO,MACpB,iBAAKH,UAAU,GAAf,WACE,SAAC,EAAAI,aAAD,CAAczB,KAAMiB,KAEpB,iBAAKI,UAAU,sCAAf,WACE,SAAC,KAAD,CAAQA,UAAU,gBAAgBK,QAAS,kBAAMR,OAAYS,EAAlB,EAA3C,UACE,SAAC,QAAD,OAGF,SAAC,KAAD,CACED,QAAS,YA1BR,SAACT,IAClBP,EAAAA,EAAAA,KACGkB,OAAO,CAAEX,SAAUA,EAASO,OAC5BK,MAAK,YAAe,IAAZ7B,EAAW,EAAXA,KACP,OAAOc,EAAS,GAAD,OAAId,EAAKwB,KAAT,KAChB,IACAM,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACb,GACJ,CAkBmBG,CAAWjB,EACZ,EACDI,UAAU,oBAJZ,mCASJ,SAAC,EAAAc,aAAD,CACEC,OAAQ,CAAC,aAAc,YAAa,QAAS,SAC7CC,UAAW,YAAc,EAAXrC,IAAa,EAC3BsC,iBAAkBpB,EAHpB,UAKE,gBAAKG,UAAU,qCAAf,UACE,SAAC,KAAD,CAAQkB,KAAK,SAASlB,UAAU,iCAAhC,uCAWjB,C","sources":["../../../../shopy/shopy-salejs/src/cart/utils.ts","../../../../shopy/shopy-salejs/src/cart/views.Create.tsx"],"sourcesContent":["import { getStaffModel, StaffService } from '@miq/staffjs';\nimport { TPriceData, TProductSize } from '@shopy/storejs';\n\nimport { TCustomer } from '../customer';\n\nconst timeout = 5000;\n\nexport type TAPIOrderItem = {\n  slug: string;\n  product: {\n    // slug: string;\n    meta_slug: string;\n    name: string;\n    name_truncated: string;\n    cover: string;\n    cover_data: {\n      src: string;\n      src_mobile: string;\n      thumb: string;\n      thumb_sq: string;\n      alt_text: string;\n      caption: string;\n    };\n    price: TPriceData;\n    retail_price: string;\n    retail_price_data: TPriceData;\n    sale_price: string;\n    sale_price_data: TPriceData;\n    is_on_sale: boolean;\n    is_oos: boolean;\n  };\n  size: string;\n  size_data: TProductSize;\n  quantity: number;\n};\n\nexport type TAPICart = {\n  slug?: string;\n  customer?: string;\n  customer_name?: string;\n  products?: string[];\n  items?: TAPIOrderItem[];\n};\n\nexport type TOrderItem = Record<string, any> & {\n  order?: string;\n  product?: string;\n  product_data?: any;\n  name?: string;\n  price?: string;\n  size?: string;\n  was_sale?: boolean;\n  img?: string;\n  quantity?: number;\n};\n\nexport type TCart = {\n  slug?: string;\n  customer?: string;\n  customer_name?: string;\n  customer_data?: TCustomer;\n  notes?: string;\n  is_completed?: boolean;\n\n  dt_delivery?: string;\n  items?: TOrderItem[];\n  products?: string[];\n\n  is_placed?: boolean;\n  subtotal?: TPriceData;\n  total?: TPriceData;\n\n  created?: string;\n  updated?: string;\n};\n\nclass CartService extends StaffService<TCart> {\n  get canDestroy(): boolean {\n    return this?.data?.products?.length === 0;\n  }\n\n  place() {\n    return this.post(`${this._path}place/`, {}, { timeout });\n  }\n\n  addItems(values: { size: string; quantity: number; product_slug: string }[]) {\n    return this.post(`${this._path}products/`, values);\n  }\n\n  addItem(prodSlug: string, values: { size: string; quantity: number }) {\n    return this.post(`${this._path}product/${prodSlug}/`, values);\n  }\n\n  updateItem(prodSlug: string, values: Record<string, any>) {\n    return this.post(`${this._path}item/${prodSlug}/`, { ...values }, { timeout });\n  }\n\n  destroyItem(itemSlug: string) {\n    return this.delete(`${this._path}item/${itemSlug}/`, { timeout });\n  }\n}\n\nexport const Cart = getStaffModel<TCart, CartService>('carts', CartService);\n\nexport type TCartInstance = ReturnType<typeof Cart>;\n","import * as React from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport Staff from '@miq/staffjs';\n\nimport { Cart } from './utils';\nimport { Button, Icons } from '@miq/componentjs';\n\nimport { TCustomer, CustomerForm, CustomerCard } from '../customer';\nimport { useDocumentTitle } from '@miq/hookjs';\n\nexport default function CartCreateView() {\n  useDocumentTitle('Add cart - Sales');\n  const navigate = useNavigate();\n  const [customer, setCustomer] = React.useState<TCustomer>();\n\n  const createCart = (customer: TCustomer) => {\n    Cart()\n      .create({ customer: customer.slug })\n      .then(({ data }) => {\n        return navigate(`${data.slug}/`);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <Staff.View title=\"Ajouter une commande\" back=\"/staff/sales/\">\n      <div className=\"d-flex justify-content-center my-3\">\n        <div className=\"w-md-65\">\n          <Staff.Section title=\"Client\" text=\"Selectionez ou ajoutez un noubeau client\" headerCN=\"mb-4\">\n            {customer && customer.slug ? (\n              <div className=\"\">\n                <CustomerCard data={customer} />\n\n                <div className=\"d-flex justify-content-between mt-4\">\n                  <Button className=\"btn btn-round\" onClick={() => setCustomer(undefined)}>\n                    <Icons.ArrowLeft />\n                  </Button>\n\n                  <Button\n                    onClick={() => {\n                      createCart(customer);\n                    }}\n                    className=\"btn btn-primary-3\"\n                  >{`Continuer »`}</Button>\n                </div>\n              </div>\n            ) : (\n              <CustomerForm\n                fields={['first_name', 'last_name', 'phone', 'email']}\n                onSuccess={({ data }) => {}}\n                onCustomerSelect={setCustomer}\n              >\n                <div className=\"d-flex justify-content-center my-4\">\n                  <Button type=\"submit\" className=\"btn btn-md btn-primary fw-bold\">\n                    {`Continuer »`}\n                  </Button>\n                </div>\n              </CustomerForm>\n            )}\n          </Staff.Section>\n        </div>\n      </div>\n    </Staff.View>\n  );\n}\n"],"names":["timeout","CartService","this","data","products","length","post","_path","values","prodSlug","itemSlug","delete","StaffService","Cart","getStaffModel","CartCreateView","useDocumentTitle","navigate","useNavigate","React","customer","setCustomer","title","back","className","text","headerCN","slug","CustomerCard","onClick","undefined","create","then","catch","err","console","log","createCart","CustomerForm","fields","onSuccess","onCustomerSelect","type"],"sourceRoot":""}