{"version":3,"file":"static/js/615.ff586a30.chunk.js","mappings":"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","sources":["../../../../shopy/shopy-storejs/src/Category/UpdateView.tsx","../../../../shopy/shopy-storejs/src/Category/forms.tsx","../../../../shopy/shopy-storejs/src/Category/models.tsx","../../../../shopy/shopy-storejs/src/Product/Attribute/index.jsx","../../../../shopy/shopy-storejs/src/Product/UpdateViewTabs.tsx"],"sourcesContent":["// import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Staff from '@miq/staffjs';\nimport Form, { useForm, MetaTitleField, MetaSlugField, MetaDescriptionField } from '@miq/formjs';\nimport { Response } from '@miq/utiljs';\nimport { useRequest } from '@miq/hookjs';\nimport { Icons } from '@miq/componentjs';\n\nimport { PublishButton, UnPublishButton } from '../components';\nimport { getImageComponent } from '../Product/UpdateViewTabs';\nimport { StaffImgUpdateButton, StaffImgAddButton, StaffImgViewSelect, StaffImgDeleteButton } from '@miq/staffjs/';\nimport { StaffCategory } from './models';\nimport { CategoryUpdateForm } from './forms';\nimport { TCategory } from '../types';\n\nconst mapData2Values = (data: TCategory = {}): TCategory => {\n  return {\n    name: data.name || '',\n    description: data.description || '',\n    is_published: data.is_published || false,\n\n    meta_title: data.meta_title || '',\n    meta_slug: data?.meta_slug || '',\n    meta_description: data?.meta_description || '',\n  };\n};\n\nexport default function CategoryStaffUpdateView() {\n  const { catSlug } = useParams();\n  const form = useForm<TCategory>(mapData2Values());\n\n  const { res, updateData } = useRequest(() => StaffCategory({ slug: catSlug }).retrieve(), {\n    refreshDeps: [catSlug],\n    onSuccess: ({ data }) => form.setValues(mapData2Values(data)),\n    onError: ({ response }) => {},\n  });\n\n  const r = new Response(res);\n  if (!r.isSuccess) return null;\n\n  let instance = StaffCategory(r.data);\n\n  const handleSuccess = ({ data }: any) => updateData(data);\n\n  const { errors } = form;\n\n  return (\n    <Staff.View\n      title=\"Modifier cette catégorie\"\n      back=\"../\"\n      requiredPerms={['store.change_category']}\n      className=\"cat-staff-update-view\"\n    >\n      <div className=\"d-grid grid-md-4\">\n        <div className=\"p-md-1\">\n          <div className=\"p-1\">\n            <CoverCard {...{ instance, updateData }} />\n          </div>\n        </div>\n\n        <div className=\"span-md-3 span-lg-2\">\n          <Staff.Section title=\"Details\">\n            <CategoryUpdateForm\n              context={form}\n              instance={instance}\n              fields={['name', 'description']}\n              onSuccess={handleSuccess}\n            >\n              <div className=\"d-flex justify-content-center\">\n                <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n              </div>\n            </CategoryUpdateForm>\n          </Staff.Section>\n\n          <Staff.Section title=\"SEO\">\n            <CategoryUpdateForm\n              context={form}\n              instance={instance}\n              fields={['meta_title', 'meta_description', 'meta_slug']}\n              onSuccess={handleSuccess}\n            >\n              <MetaTitleField error={errors.meta_title} />\n              <MetaSlugField error={errors.meta_slug} />\n              <MetaDescriptionField error={errors.meta_description} />\n\n              <div className=\"d-flex justify-content-center\">\n                <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n              </div>\n            </CategoryUpdateForm>\n          </Staff.Section>\n        </div>\n\n        <div className=\"span-lg-1\">\n          <div style={{ top: 0, position: 'sticky' }}>\n            {instance.is_published ? (\n              <UnPublishButton instance={instance} onSuccess={({ data }: any) => updateData(data)}>\n                Dépublier cette catégorie\n              </UnPublishButton>\n            ) : (\n              <PublishButton\n                instance={instance}\n                onSuccess={({ data }: any) => updateData(data)}\n                onError={(err: any) => form.handleError(err)}\n              >\n                Publier cette catégorie\n              </PublishButton>\n            )}\n          </div>\n        </div>\n      </div>\n    </Staff.View>\n  );\n}\n\nconst CoverCard = (props: { instance: ReturnType<typeof StaffCategory>; updateData: (r: any) => void }) => {\n  const { updateData, instance } = props;\n  const form = useForm({ view: 'src' });\n\n  const img = Staff.Img(instance?.cover_data || {});\n\n  if (!img?.slug)\n    return (\n      <div className=\"d-flex align-items-center justify-content-center flex-column text-center border-1 rounded p-3\">\n        <StaffImgAddButton\n          onSuccess={({ data }: any) => {\n            instance\n              .update({ cover: data.slug })\n              .then(({ data }: any) => updateData(data))\n              .catch((err: any) => {});\n          }}\n          label=\"Ajouter une image\"\n          className=\"btn-primary-3 btn-md\"\n        />\n      </div>\n    );\n\n  const Image = getImageComponent(form.values.view);\n  return (\n    <Form context={form} className=\"p-cover-update-form\">\n      <Staff.Section\n        border\n        title={\n          <StaffImgDeleteButton\n            onSuccess={() => updateData({ cover_data: null, cover: null })}\n            instance={img}\n            className=\"btn-danger-3\"\n          >\n            <Icons.Trash />\n          </StaffImgDeleteButton>\n        }\n        actions={<StaffImgViewSelect required name=\"view\" />}\n        className=\"p-image-card\"\n      >\n        <StaffImgUpdateButton\n          instance={img}\n          field={form.values.view}\n          onSuccess={({ data }: any) => updateData({ cover: data.slug, cover_data: data })}\n        >\n          <Image {...img} />\n        </StaffImgUpdateButton>\n      </Staff.Section>\n    </Form>\n  );\n};\n","import Form, { DescriptionField, NameField, TextFieldProps, useForm } from '@miq/formjs';\nimport { FormProps, IFormCallbackProps, IFormUpdateProps } from '@miq/formjs/src/Form';\nimport { isRequired as isR } from '@miq/utiljs';\nimport React from 'react';\nimport { StaffCategory } from './models';\n\nexport const CategoryCreateForm: React.FC<IFormCallbackProps> = (props) => {\n  const form = useForm({ name: '' });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    return StaffCategory()\n      .create(form.values)\n      .then((res: any) => props?.onSuccess?.(res))\n      .catch((err: any) => {\n        form.handleError(err);\n        props?.onError?.(err);\n      });\n  };\n  return (\n    <CategoryForm context={form} onSubmit={handleSubmit}>\n      <div className=\"\">\n        <CategoryForm.NameField error={form.errors.name} />\n      </div>\n\n      <div className=\"my-3\">\n        <Form.Submit value={'Save category'} className=\"btn btn-primary\" />\n      </div>\n    </CategoryForm>\n  );\n};\n\ninterface ICategoryUpdateFormProps extends Omit<IFormUpdateProps, 'instance'> {\n  instance: ReturnType<typeof StaffCategory>;\n  onWillSubmit?: () => void;\n  fields: string[];\n}\n\nexport const CategoryUpdateForm: React.FC<ICategoryUpdateFormProps> = ({\n  instance = isR('Category instance'),\n  fields = [],\n  children,\n  ...props\n}) => {\n  const { onSuccess, onError, onWillSubmit, ...rest } = props;\n  const { context } = rest;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onWillSubmit?.();\n\n    const fd: any = {};\n    fields.forEach((field) => {\n      const value = context.values[field];\n      if (value == null) return;\n      fd[field] = value;\n    });\n\n    return instance\n      .update(fd)\n      .then((res: any) => onSuccess?.(res))\n      .catch((err: any) => {\n        if (onError) return onError(err);\n        return context?.handleError?.(err);\n      });\n  };\n  return (\n    <CategoryForm {...rest} onSubmit={handleSubmit}>\n      {fields.includes('name') && (\n        <CategoryForm.NameField\n          label=\"Nom de la catégorie\"\n          error={context?.errors?.name}\n          text={`Ajoutez un nom qui décrit cette catégorie.\\nNous recommandons 65 caractères au max.`}\n        />\n      )}\n\n      {fields.includes('description') && (\n        <CategoryForm.DescriptionField\n          label=\"Description\"\n          error={context?.errors?.description}\n          text={`Décrivez cet catégorie.`}\n        />\n      )}\n\n      {fields.includes('position') && (\n        <CategoryForm.PositionField\n          label=\"Position\"\n          error={context?.errors?.position}\n          // text={`Décrivez cet ca`}\n        />\n      )}\n      {children}\n    </CategoryForm>\n  );\n};\n\nexport const CategoryForm = (props: FormProps) => <Form {...props} />;\n\nCategoryForm.NameField = (props: TextFieldProps) => (\n  <NameField placeholder=\"Entrez le nom de la catégorie ...\" {...props} required />\n);\n\nCategoryForm.DescriptionField = (props: TextFieldProps) => <DescriptionField {...props} />;\nCategoryForm.PositionField = ({ label, error, ...props }: TextFieldProps) => (\n  <Form.Field {...{ label, error }}>\n    <Form.Text name=\"position\" type=\"number\" min={0} {...props} />\n  </Form.Field>\n);\n","import { StaffModel, StaffService } from '@miq/staffjs';\nimport { TCategory } from '../types';\n\nclass StaffCategoryService extends StaffService<TCategory> {\n  publish() {\n    return this.update({ is_published: true });\n  }\n\n  unpublish() {\n    return this.update({ is_published: false });\n  }\n}\n\nexport const StaffCategory = (data: TCategory = {}) => {\n  let { dt_published } = data;\n  if (dt_published) dt_published = new Date(dt_published);\n\n  return StaffModel<TCategory, StaffCategoryService>({ ...data, dt_published }, 'categories', StaffCategoryService);\n};\n","import * as React from 'react';\nimport Form, { useForm } from '@miq/formjs';\n\nimport { Button, ConfirmButton, Icons } from '@miq/componentjs';\n\nexport const AttributeUpdateForm = ({ data, productInstance, ...props }) => {\n  const form = useForm({ name: data.name || '', value: data.value || '' });\n\n  if (!data?.slug || !productInstance?.slug) return null;\n  const { onSuccess, onError } = props;\n\n  return (\n    <Form\n      context={form}\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        productInstance\n          .patchAttribute(data.slug, form.values)\n          .then((res) => onSuccess?.(res))\n          .catch((err) => {\n            form.handleError(err);\n            return onError?.(err);\n          });\n      }}\n    >\n      <div className=\"d-grid grid-md-6 gap-1\">\n        <div className=\"span-md-2\">\n          <AttrNameField error={form.errors.name} />\n        </div>\n\n        <div className=\"span-md-3\">\n          <AttrValueField error={form.errors.value} className=\"\" />\n        </div>\n\n        <div className=\"span-md-1\">\n          <Form.Submit value=\"Save\" className=\"btn-primary-2 me-2\" />\n          <AttributeDeleteButton {...{ productInstance, data, onSuccess, onError }} />\n        </div>\n      </div>\n    </Form>\n  );\n};\n\nconst formDefaultValues = { name: '', value: '' };\nexport const AttributeCreateForm = ({ productInstance, ...props }) => {\n  const form = useForm(formDefaultValues);\n\n  if (!productInstance?.slug) return null;\n\n  return (\n    <Form\n      context={form}\n      onSubmit={(e) => {\n        e.preventDefault();\n\n        productInstance\n          .postAttribute(form.values)\n          .then((res) => {\n            form.setValues(formDefaultValues);\n            return props?.onSuccess?.(res);\n          })\n          .catch((err) => {\n            form.handleError(err);\n            return props?.onError?.(err);\n          });\n      }}\n    >\n      <div className=\"d-grid grid-md-6 gap-1\">\n        <div className=\"span-md-2\">\n          <AttrNameField error={form.errors.name} />\n        </div>\n\n        <div className=\"span-md-3\">\n          <AttrValueField error={form.errors.value} className=\"\" />\n        </div>\n\n        <div className=\"span-md-1\">\n          <Form.Submit value=\"Save\" className=\"btn-primary-2\" />\n        </div>\n      </div>\n    </Form>\n  );\n};\n\nconst AttrNameField = (props) => {\n  const { label, text, error, placeholder = `Entrez le nom de l'attribut ...`, ...rest } = props;\n\n  return (\n    <Form.Field {...{ label, text, error }}>\n      <Form.Text {...rest} required name=\"name\" placeholder={placeholder} maxLength={30} minLength={2} />\n    </Form.Field>\n  );\n};\nconst AttrValueField = (props) => {\n  const { label, text, error, placeholder = `Entrez la valuer de l'attribut ...`, ...rest } = props;\n\n  return (\n    <Form.Field {...{ label, text, error }}>\n      <Form.Text {...rest} required name=\"value\" placeholder={placeholder} maxLength={99} minLength={2} />\n    </Form.Field>\n  );\n};\n\nconst AttributeDeleteButton = ({ data, productInstance, ...props }) => {\n  if (!data?.slug || !productInstance?.slug) return null;\n  const { onSuccess, onError, ...rest } = props;\n\n  return (\n    <ConfirmButton\n      {...rest}\n      renderHeader={() => <div>Supprimer un attribut</div>}\n      renderFooter={({ setOpen }) => (\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Button onClick={() => setOpen(false)}>Annuler</Button>\n\n          <Button\n            onClick={() =>\n              productInstance\n                .deleteAttribute(data.slug)\n                .then((res) => {\n                  setOpen(false);\n                  return onSuccess?.(res);\n                })\n                .catch((err) => onError?.(err))\n            }\n            className=\"btn-danger\"\n          >\n            Supprimer\n          </Button>\n        </div>\n      )}\n      render={() => (\n        <div className=\"p-3\">\n          Are you sure you want to delete this attribute:\n          <div className=\"fw-bold\">{data.name}</div>\n        </div>\n      )}\n      className=\"attr-delete-button btn-danger-3\"\n    >\n      <Icons.Trash />\n    </ConfirmButton>\n  );\n};\n","import { Button, Icons, ImgType } from '@miq/componentjs';\nimport Form, { MetaDescriptionField, MetaSlugField, MetaTitleField, useForm } from '@miq/formjs';\nimport Staff, {\n  StaffImg,\n  StaffImgAddButton,\n  StaffImgDeleteButton,\n  StaffImgUpdateButton,\n  StaffImgViewSelect,\n} from '@miq/staffjs';\nimport * as React from 'react';\nimport { CategoryChoicesType } from '../types';\nimport { AttributeCreateForm, AttributeUpdateForm } from './Attribute';\nimport { ProductDeleteButton, ProductImagesAddButton } from './components';\nimport { ProductForm, ProductUpdateForm } from './forms';\nimport { StaffProduct } from './models';\nimport { SizeAddForm, SizeUpdateForm } from './Size';\n\nexport type ProductUpdateTabProps = {\n  form: ReturnType<typeof useForm>;\n  instance: ReturnType<typeof StaffProduct>;\n  onUpdate: (data: any) => void;\n  categories: CategoryChoicesType;\n};\n\nexport const ProductUpdateInfoTab = (props: ProductUpdateTabProps) => {\n  const { form, instance, categories, onUpdate } = props;\n  const { errors } = form;\n  const PFormFields = (\n    <>\n      <ProductForm.NameField\n        label=\"Nom\"\n        error={errors.name}\n        text={`Ajoutez un nom qui décrit cet article. Les noms peuvent contenir jusqu’à 99 caractères.\\nNous recommandons 65 caractères au max.`}\n      />\n\n      <div className=\"d-grid grid-md-2 gap-1\">\n        <ProductForm.CategoryField label=\"Catégorie\" categories={categories} error={errors.category} />\n        <ProductForm.RetailPriceField label=\"Prix\" error={errors.retail_price} />\n      </div>\n\n      <ProductForm.PresaleCheckboxField label=\"Pré-vente\" error={errors.is_pre_sale} />\n      {form.values.is_pre_sale && (\n        <ProductForm.PresaleTextField\n          text=\"Ajouter un text de pré-vente.(facultatif)\"\n          error={errors.is_pre_sale_text}\n        />\n      )}\n\n      <ProductForm.OnSaleCheckboxField label=\"Cet article est en solde\" error={errors.is_on_sale} />\n      {form.values.is_on_sale && <ProductForm.SalePriceField label=\"Prix réduit\" error={errors.sale_price} />}\n\n      <ProductForm.DescriptionField\n        label=\"Description\"\n        error={errors.description}\n        text={`Ajoutez les caractéristiques uniques qui décrivent cet article.`}\n      />\n\n      <div className=\"my-4\">\n        <ProductForm.OosCheckboxField error={errors.is_oos} />\n      </div>\n\n      <div className=\"my-4\">\n        <ProductForm.IsExplicitCheckboxField error={errors.is_explicit} />\n      </div>\n    </>\n  );\n\n  return (\n    <Staff.Section>\n      <ProductUpdateForm\n        context={form}\n        {...{\n          instance,\n          fields: [\n            'name',\n            'category',\n            'description',\n            'retail_price',\n            'is_pre_sale',\n            'is_pre_sale_text',\n            'is_pre_sale_dt',\n            'is_on_sale',\n            'sale_price',\n            'is_oos',\n            'is_explicit',\n          ],\n          onSuccess: ({ data }) => onUpdate(data),\n        }}\n      >\n        <Staff.Section\n          border\n          title=\"Details\"\n          text=\"Modifier les informations de ce produit.\"\n          footer={\n            <div className=\"d-flex justify-content-center\">\n              <Form.Submit value=\"Sauvegarder\" className=\"btn-primary min-w-25\" />\n            </div>\n          }\n        >\n          {PFormFields}\n        </Staff.Section>\n      </ProductUpdateForm>\n\n      <Staff.Section border title=\"Seo\">\n        <ProductUpdateForm\n          context={form}\n          {...{\n            instance,\n            fields: ['meta_title', 'meta_description', 'meta_slug'],\n            onSuccess: ({ data }) => onUpdate(data),\n          }}\n        >\n          <MetaTitleField error={errors.meta_title} />\n          <MetaSlugField error={errors.meta_slug} />\n          <MetaDescriptionField error={errors.meta_description} />\n\n          <div className=\"d-flex justify-content-center\">\n            <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n          </div>\n        </ProductUpdateForm>\n      </Staff.Section>\n    </Staff.Section>\n  );\n};\n\nexport const ProductUpdateInventoryTab = (props: any) => {\n  const { instance, onUpdate } = props;\n  const [addAtr, setAddAtr] = React.useState(false);\n  const [addSize, setAddSize] = React.useState(false);\n\n  return (\n    <Staff.Section title=\"Inventory\">\n      <div className=\"d-grid grid-md-3 gap-1\">\n        <div className=\"span-md-2\">\n          <Staff.Section\n            title=\"Tailles\"\n            text=\"Ajouter des tailles\"\n            actions={\n              <Button onClick={() => setAddSize(!addSize)} className=\"btn-primary-3\">\n                Ajouter une taille\n              </Button>\n            }\n          >\n            {addSize && (\n              <Staff.Section text=\"Ajouter une taille\">\n                <SizeAddForm productInstance={instance} onSuccess={({ data }: any) => onUpdate(data)} />\n              </Staff.Section>\n            )}\n\n            {instance.sizes.map((size: any) => {\n              return (\n                <SizeUpdateForm\n                  data={size}\n                  productInstance={instance}\n                  onSuccess={({ data }: any) => onUpdate(data)}\n                  key={size.slug}\n                />\n              );\n            })}\n          </Staff.Section>\n\n          <Staff.Section\n            title=\"Attributs\"\n            actions={\n              <Button onClick={() => setAddAtr(!addAtr)} className=\"btn-primary-3\">\n                Ajouter un attribut\n              </Button>\n            }\n          >\n            {addAtr && (\n              <Staff.Section text=\"Ajouter un attribut au produit.\">\n                <AttributeCreateForm productInstance={instance} onSuccess={({ data }: any) => onUpdate(data)} />\n              </Staff.Section>\n            )}\n\n            {instance.attributes.map((attr: any) => (\n              <div className=\"mb-1\" key={attr.slug}>\n                <AttributeUpdateForm\n                  data={attr}\n                  productInstance={instance}\n                  onSuccess={({ data }: any) => onUpdate(data)}\n                />\n              </div>\n            ))}\n          </Staff.Section>\n        </div>\n\n        <div className=\"mt-3\">{/* <ProductSupplierData {...{ instance }} /> */}</div>\n      </div>\n    </Staff.Section>\n  );\n};\n\nexport const ProductUpdateSettingsTab = (props: any) => {\n  const { instance, listRes, navigate } = props;\n\n  return (\n    <Staff.Section title=\"Settings\">\n      <Staff.Section\n        title=\"Supprimer ce produit\"\n        actions={\n          <ProductDeleteButton\n            {...{ instance }}\n            onSuccess={() => {\n              listRes.refresh();\n              return navigate(props.back);\n            }}\n            onError={(res) => {\n              if (res.status === 404) navigate('../');\n            }}\n          />\n        }\n      />\n    </Staff.Section>\n  );\n};\n\nexport const ProductUpdateMediaTab = (props: any) => {\n  const { instance, onUpdate } = props;\n  const { cover_data } = instance;\n  return (\n    <Staff.Section\n      title=\"Media\"\n      actions={<ProductImagesAddButton productInstance={instance} onSuccess={(res: any) => onUpdate?.(res.data)} />}\n    >\n      <div className=\"d-grid grid-md-3 grid-lg-4 gap-2\">\n        <CoverCard\n          {...props}\n          img={StaffImg(cover_data)}\n          onDeleteSuccess={() => onUpdate({ cover_data: null, cover: null })}\n        />\n\n        {instance.images_data.map((image: ImgType) => {\n          const img = StaffImg(image);\n          const swapCover = () => instance.swapCover(img.slug).then(({ data }: any) => onUpdate(data));\n          return (\n            <ImageCard\n              {...props}\n              img={img}\n              actions={<Staff.Button onClick={swapCover}>Set as cover</Staff.Button>}\n              onDeleteSuccess={() =>\n                onUpdate({\n                  images_data: instance.images_data.filter((i: any) => i.slug !== img.slug),\n                  images: instance.images.filter((i: any) => i !== img.slug),\n                })\n              }\n              key={img.slug}\n            />\n          );\n        })}\n      </div>\n    </Staff.Section>\n  );\n};\n\nexport const getImageComponent = (view: string) => {\n  switch (view) {\n    case 'mobile':\n      return StaffImg.Mobile;\n    case 'square':\n      return StaffImg.Square;\n    case 'thumb':\n      return StaffImg.Thumb;\n    case 'picture':\n      return StaffImg.Picture;\n    default:\n      return StaffImg.Image;\n  }\n};\n\nconst CoverCard = (props: any) => {\n  const { img, onUpdate, instance } = props;\n  const form = useForm({ view: 'src' });\n\n  if (!img.slug)\n    return (\n      <div className=\"p-cover-add-btn d-flex align-items-center justify-content-center flex-column text-center border-1 rounded p-3\">\n        <p className=\"text-sm text-muted mb-3\">Ce produit n'a pas d'image principale</p>\n        <StaffImgAddButton\n          onSuccess={({ data }: any) => {\n            instance\n              .update({ cover: data.slug })\n              .then(({ data }: any) => onUpdate(data))\n              .catch((err: any) => {});\n          }}\n          label=\"Ajouter une image\"\n          className=\"btn-primary-3 btn-md\"\n        />\n      </div>\n    );\n\n  const Image = getImageComponent(form.values.view);\n  return (\n    <Form context={form} className=\"p-cover-update-form\">\n      <Staff.Section\n        border\n        title={<ImgDeleteButton {...props} img={img} />}\n        actions={<StaffImgViewSelect required name=\"view\" />}\n        className=\"p-image-card\"\n      >\n        <StaffImgUpdateButton\n          instance={img}\n          field={form.values.view}\n          onSuccess={({ data }: any) => onUpdate({ cover: data.slug, cover_data: data })}\n        >\n          <Image {...img} />\n        </StaffImgUpdateButton>\n      </Staff.Section>\n    </Form>\n  );\n};\n\nconst ImageCard = ({ img, actions, ...props }: any) => {\n  return (\n    <Staff.Section border title={<ImgDeleteButton {...props} img={img} />} actions={actions} className=\"p-image-card\">\n      <StaffImg.Image {...img} />\n    </Staff.Section>\n  );\n};\n\nconst ImgDeleteButton = ({ img, onDeleteSuccess }: any) =>\n  img && img.slug ? (\n    <StaffImgDeleteButton onSuccess={onDeleteSuccess} instance={img} className=\"btn-danger-3\">\n      <Icons.Trash />\n    </StaffImgDeleteButton>\n  ) : null;\n"],"names":["mapData2Values","data","name","description","is_published","meta_title","meta_slug","meta_description","CategoryStaffUpdateView","catSlug","useParams","form","useForm","useRequest","StaffCategory","slug","retrieve","refreshDeps","onSuccess","setValues","onError","response","res","updateData","r","Response","isSuccess","instance","handleSuccess","errors","title","back","requiredPerms","className","CoverCard","context","fields","value","error","style","top","position","err","handleError","props","view","img","Staff","cover_data","update","cover","then","catch","label","Image","getImageComponent","values","border","actions","required","field","CategoryCreateForm","CategoryForm","onSubmit","e","preventDefault","create","NameField","CategoryUpdateForm","isR","children","onWillSubmit","rest","fd","forEach","includes","text","DescriptionField","PositionField","placeholder","type","min","StaffCategoryService","this","StaffService","dt_published","Date","StaffModel","AttributeUpdateForm","productInstance","patchAttribute","AttrNameField","AttrValueField","AttributeDeleteButton","formDefaultValues","AttributeCreateForm","postAttribute","maxLength","minLength","renderHeader","renderFooter","setOpen","onClick","deleteAttribute","render","ProductUpdateInfoTab","categories","onUpdate","PFormFields","category","retail_price","is_pre_sale","is_pre_sale_text","is_on_sale","sale_price","is_oos","is_explicit","footer","ProductUpdateInventoryTab","React","addAtr","setAddAtr","addSize","setAddSize","Size","sizes","map","size","attributes","attr","ProductUpdateSettingsTab","listRes","navigate","refresh","status","ProductUpdateMediaTab","StaffImg","onDeleteSuccess","images_data","image","ImageCard","swapCover","filter","i","images","key","ImgDeleteButton"],"sourceRoot":""}