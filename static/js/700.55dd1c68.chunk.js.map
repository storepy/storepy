{"version":3,"file":"static/js/700.55dd1c68.chunk.js","mappings":"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","sources":["../../../../shopy/shopy-salejs/src/order/buttons.tsx","../../../../shopy/shopy-salejs/src/order/utils.ts","../../../../shopy/shopy-salejs/src/order/views.Update.tsx"],"sourcesContent":["import * as React from 'react';\nimport { LinkProps } from 'react-router-dom';\n\nimport Staff from '@miq/staffjs';\n\nimport { TOrder, TOrderInstance } from './utils';\nimport { Button, ConfirmButton, Icons } from '@miq/componentjs';\n\nexport const OrderMarkDelivredButton = ({\n  instance,\n  ...props\n}: {\n  instance: TOrderInstance;\n  icon?: boolean;\n  onSuccess: (res?: any) => void;\n  onFailure?: (res?: any) => void;\n}) => {\n  return (\n    <ConfirmButton\n      renderHeader={() => <div className=\"text-md p-1\">Le client a t'il reçu le produit?</div>}\n      renderFooter={({ setOpen }) => (\n        <div className=\"d-flex justify-content-between align-items-center\">\n          <Button onClick={() => setOpen(false)}>Pas encore</Button>\n\n          <Button\n            onClick={() =>\n              instance\n                .mark_delivered()\n                .then((r) => {\n                  props?.onSuccess?.(r);\n                  // setOpen(false);\n                })\n                .catch((err) => {\n                  props?.onFailure?.(err);\n                })\n            }\n            className=\"btn-primary fw-bold\"\n          >\n            Oui\n          </Button>\n        </div>\n      )}\n      render={() => <div className=\"p-3\"></div>}\n      className=\"btn-primary btn-md fw-bold w-50 d-flex align-items-center justify-content-center\"\n    >\n      {instance?.is_delivered ? <Icons.Truck /> : <Icons.TruckOff />}\n      {!props?.icon && <span className=\"ms-1\">Confirmer la livraison</span>}\n    </ConfirmButton>\n  );\n};\n\nexport const OrderUpdateLink = (props: Omit<LinkProps, 'to'> & { instance: TOrder | TOrderInstance }) => (\n  <Staff.Link\n    title={`Modifier cette commande`}\n    {...props}\n    to={`/staff/sales/orders/${props.instance.slug}/`}\n    requiredPerms={['sales.change_order']}\n  >\n    {props.children}\n  </Staff.Link>\n);\n","import { getStaffModel, StaffService } from '@miq/staffjs';\nimport { TPriceData } from '@shopy/storejs';\n\nimport { TOrderItem } from '../cart';\nimport { TCustomer } from '../customer';\n\nconst timeout = 5000;\n\nexport type TOrder = {\n  slug?: string;\n  transaction_id?: string;\n  customer?: string;\n  customer_name?: string;\n  customer_data?: TCustomer;\n  //   notes?: string;\n  is_delivered?: boolean;\n  dt_delivered?: string;\n\n  items?: TOrderItem[];\n  items_count?: number;\n  //   products?: string[];\n\n  //   is_placed?: boolean;\n  subtotal?: TPriceData;\n  total?: TPriceData;\n\n  created?: string;\n  updated?: string;\n};\n\nclass OrderService extends StaffService<TOrder> {\n  mark_delivered() {\n    if (this.data?.is_delivered) return Promise.resolve({ data: this.data });\n    return this.post(`${this._path}deliver/`, {}, { timeout });\n  }\n\n  get deliveredDt() {\n    return this.formatDt(this.data?.dt_delivered);\n  }\n  get updatedDt() {\n    return this.formatDt(this.data?.updated);\n  }\n  get createdDt() {\n    return this.formatDt(this.data?.created);\n  }\n\n  formatDt(dt?: string) {\n    if (!dt) return null;\n    return new Date(dt).toLocaleDateString(undefined, {\n      day: '2-digit',\n      weekday: 'short',\n      month: 'short',\n      year: '2-digit',\n    });\n  }\n}\n\nexport const Order = getStaffModel<TOrder, OrderService>('orders', OrderService);\n\nexport type TOrderInstance = ReturnType<typeof Order>;\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\n// import type { TOrder } from './utils';\n\nimport Staff from '@miq/staffjs';\nimport { useDocumentTitle } from '@miq/hookjs';\nimport { SharedDataCtx } from '@miq/contextjs';\nimport { uuid } from '@miq/utiljs';\nimport { Loading } from '@miq/componentjs';\nimport { ProductPriceDisplay } from '@shopy/storejs';\n\nimport { CustomerCard } from '../customer';\n\nimport { Order } from './utils';\nimport { ItemProductCard } from '../cart/components';\nimport { OrderMarkDelivredButton } from './buttons';\n\nexport default function CartUpdateView() {\n  useDocumentTitle('Place cart - Sales');\n  const { orderSlug } = useParams();\n\n  const ctx = React.useContext(SharedDataCtx);\n  const { order_data } = ctx;\n\n  if (orderSlug !== order_data?.slug || !ctx.isLoaded) return <Loading />;\n\n  const order = Order(order_data || {});\n\n  return (\n    <Staff.View\n      title={`Commande`}\n      actions={<></>}\n      back=\"/staff/sales/orders/\"\n      headerCN=\"miq-container center\"\n      footer={\n        <div className=\"d-flex align-items-center justify-content-center\">\n          {!order?.is_delivered && (\n            <OrderMarkDelivredButton\n              instance={order}\n              onSuccess={(r) => {\n                ctx.updateData({ order_data: { ...order_data, ...r.data } });\n              }}\n            />\n          )}\n        </div>\n      }\n    >\n      {/* <pre>{JSON.stringify(order.export(), null, 2)}</pre> */}\n\n      <Staff.Section mainCN=\"miq-container center\">\n        <Staff.Section title=\"» Details\" mainCN=\"ps-2\">\n          <ul>\n            <li>\n              Numéro de transaction: <span className=\"fw-bold\">{order.transaction_id}</span>\n            </li>\n            {order.is_delivered ? (\n              <li className=\"text-muted text-sm\">Livrée le {order.deliveredDt}</li>\n            ) : (\n              <li className=\"text-muted text-sm\">Modifiée le {order.updatedDt}</li>\n            )}\n\n            <li className=\"text-muted text-sm\">Ajoutée le {order.createdDt}</li>\n          </ul>\n        </Staff.Section>\n\n        <Staff.Section title=\"» Client\" mainCN=\"ps-2\">\n          <CustomerCard data={order.customer_data!} />\n        </Staff.Section>\n\n        <Staff.Section\n          title={`» Produits (${order?.items_count})`}\n          mainCN=\"ps-2\"\n          footer={\n            <div className=\"\">\n              <div className=\"d-flex justify-content-between\">\n                <span className=\"\">Sous-total</span>\n                <span>\n                  <ProductPriceDisplay retail_price_data={order?.subtotal} />\n                </span>\n              </div>\n              <div className=\"d-flex justify-content-between\">\n                <span className=\"\">Total</span>\n                <span className=\"fw-bold\">\n                  <ProductPriceDisplay retail_price_data={order?.subtotal} />\n                </span>\n              </div>\n            </div>\n          }\n        >\n          {order.items?.map((i) => (\n            <ItemProductCard {...i} size={i.size_data} key={uuid()} />\n          ))}\n        </Staff.Section>\n      </Staff.Section>\n    </Staff.View>\n  );\n}\n"],"names":["OrderMarkDelivredButton","instance","props","renderHeader","className","renderFooter","setOpen","onClick","mark_delivered","then","r","onSuccess","catch","err","onFailure","render","is_delivered","icon","OrderUpdateLink","title","to","slug","requiredPerms","children","OrderService","this","data","Promise","resolve","post","_path","timeout","formatDt","dt_delivered","updated","created","dt","Date","toLocaleDateString","undefined","day","weekday","month","year","StaffService","Order","getStaffModel","CartUpdateView","useDocumentTitle","orderSlug","useParams","ctx","React","SharedDataCtx","order_data","isLoaded","order","actions","back","headerCN","footer","updateData","mainCN","transaction_id","deliveredDt","updatedDt","createdDt","CustomerCard","customer_data","items_count","retail_price_data","subtotal","items","map","i","size","size_data","key","uuid"],"sourceRoot":""}