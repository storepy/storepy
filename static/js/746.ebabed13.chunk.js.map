{"version":3,"file":"static/js/746.ebabed13.chunk.js","mappings":"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","sources":["../../../../shopy/shopy-storejs/src/category/forms.tsx","../../../../shopy/shopy-storejs/src/category/views.Update.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { isRequired as isR } from '@miq/utiljs';\nimport { FormProps, TFormCallbackProps, TFormUpdateProps } from '@miq/formjs';\nimport Form, { DescriptionField, NameField, TextFieldProps, useForm } from '@miq/formjs';\n\nimport { StaffCategory } from './utils';\n\nexport const CategoryCreateForm: React.FC<TFormCallbackProps> = (props) => {\n  const form = useForm({ name: '' });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    return StaffCategory()\n      .create(form.values)\n      .then((res) => props?.onSuccess?.(res))\n      .catch((err) => {\n        form.handleError(err);\n        props?.onFailure?.(err);\n      });\n  };\n  return (\n    <CategoryForm context={form} onSubmit={handleSubmit}>\n      <div className=\"\">\n        <CategoryForm.NameField error={form.errors.name} />\n      </div>\n\n      <div className=\"my-3\">\n        <Form.Submit value=\"Save category\" className=\"btn btn-primary\" />\n      </div>\n    </CategoryForm>\n  );\n};\n\ninterface ICategoryUpdateFormProps extends TFormUpdateProps {\n  instance: ReturnType<typeof StaffCategory>;\n  onWillSubmit?: () => void;\n  fields: string[];\n}\n\nexport const CategoryUpdateForm: React.FC<ICategoryUpdateFormProps> = ({\n  instance = isR('Category instance'),\n  fields = [],\n  children,\n  ...props\n}) => {\n  const { onSuccess, onError, onWillSubmit, ...rest } = props;\n  const { context } = rest;\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onWillSubmit?.();\n\n    const fd: any = {};\n    fields.forEach((field) => {\n      const value = context.values[field];\n      if (value == null) return;\n      fd[field] = value;\n    });\n\n    return instance\n      .update(fd)\n      .then((res: any) => onSuccess?.(res))\n      .catch((err: any) => {\n        if (onError) return onError(err);\n        return context?.handleError?.(err);\n      });\n  };\n  return (\n    <CategoryForm {...rest} onSubmit={handleSubmit}>\n      {fields.includes('name') && (\n        <CategoryForm.NameField\n          label=\"Nom de la catégorie\"\n          error={context?.errors?.name}\n          text={`Ajoutez un nom qui décrit cette catégorie.\\nNous recommandons 65 caractères au max.`}\n        />\n      )}\n\n      {fields.includes('description') && (\n        <CategoryForm.DescriptionField\n          label=\"Description\"\n          error={context?.errors?.description}\n          text={`Décrivez cet catégorie.`}\n        />\n      )}\n\n      {fields.includes('position') && (\n        <CategoryForm.PositionField\n          label=\"Position\"\n          error={context?.errors?.position}\n          // text={`Décrivez cet ca`}\n        />\n      )}\n      {children}\n    </CategoryForm>\n  );\n};\n\nexport const CategoryForm = (props: FormProps) => <Form {...props} />;\n\nCategoryForm.NameField = (props: TextFieldProps) => (\n  <NameField placeholder=\"Entrez le nom de la catégorie ...\" {...props} required />\n);\n\nCategoryForm.DescriptionField = (props: TextFieldProps) => <DescriptionField {...props} />;\nCategoryForm.PositionField = ({ label, error, ...props }: TextFieldProps) => (\n  <Form.Field {...{ label, error }}>\n    <Form.Text name=\"position\" type=\"number\" min={0} {...props} />\n  </Form.Field>\n);\n","// import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Staff from '@miq/staffjs';\nimport { Response } from '@miq/utiljs';\nimport { useRequest } from '@miq/hookjs';\nimport { Icons } from '@miq/componentjs';\nimport Form, { useForm, MetaTitleField, MetaSlugField, MetaDescriptionField } from '@miq/formjs';\nimport { StaffImgUpdateButton, StaffImgAddButton, StaffImgViewSelect, StaffImgDeleteButton } from '@miq/staffjs/';\n\nimport { PublishButton, UnPublishButton } from '../components';\n\nimport { TCategory } from '../types';\nimport { StaffCategory } from './utils';\nimport { CategoryUpdateForm } from './forms';\n\nconst mapData2Values = (data: TCategory = {}): TCategory => {\n  return {\n    name: data.name || '',\n    description: data.description || '',\n    is_published: data.is_published || false,\n\n    meta_title: data.meta_title || '',\n    meta_slug: data?.meta_slug || '',\n    meta_description: data?.meta_description || '',\n  };\n};\n\nexport default function CategoryStaffUpdateView() {\n  const { catSlug } = useParams();\n  const form = useForm<TCategory>(mapData2Values());\n\n  const { res, updateData } = useRequest(() => StaffCategory({ slug: catSlug }).retrieve(), {\n    refreshDeps: [catSlug],\n    onSuccess: ({ data }) => {\n      document.title = `${data?.name} - Update category`;\n      form.setValues(mapData2Values(data));\n    },\n    onError: ({ response }) => {},\n  });\n\n  const r = new Response(res);\n  if (!r.isSuccess) return null;\n\n  let instance = StaffCategory(r.data);\n\n  const handleSuccess = ({ data }: any) => updateData(data);\n\n  const { errors } = form;\n\n  return (\n    <Staff.View\n      title=\"Modifier cette catégorie\"\n      back=\"../\"\n      requiredPerms={['store.change_category']}\n      className=\"cat-staff-update-view\"\n    >\n      <div className=\"d-grid grid-md-4\">\n        <div className=\"p-md-1\">\n          <div className=\"p-1\">\n            <CoverCard {...{ instance, updateData }} />\n          </div>\n        </div>\n\n        <div className=\"span-md-3 span-lg-2\">\n          <Staff.Section title=\"Details\">\n            <CategoryUpdateForm\n              context={form}\n              instance={instance}\n              fields={['name', 'description']}\n              onSuccess={handleSuccess}\n            >\n              <div className=\"d-flex justify-content-center\">\n                <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n              </div>\n            </CategoryUpdateForm>\n          </Staff.Section>\n\n          <Staff.Section title=\"SEO\">\n            <CategoryUpdateForm\n              context={form}\n              instance={instance}\n              fields={['meta_title', 'meta_description', 'meta_slug']}\n              onSuccess={handleSuccess}\n            >\n              <MetaTitleField error={errors.meta_title} />\n              <MetaSlugField error={errors.meta_slug} />\n              <MetaDescriptionField error={errors.meta_description} />\n\n              <div className=\"d-flex justify-content-center\">\n                <Form.Submit value=\"Sauvegarder\" className=\"btn-primary-3 min-w-25\" />\n              </div>\n            </CategoryUpdateForm>\n          </Staff.Section>\n        </div>\n\n        <div className=\"span-lg-1\">\n          <div style={{ top: 0, position: 'sticky' }}>\n            {instance.is_published ? (\n              <UnPublishButton instance={instance} onSuccess={({ data }: any) => updateData(data)}>\n                Dépublier cette catégorie\n              </UnPublishButton>\n            ) : (\n              <PublishButton\n                instance={instance}\n                onSuccess={({ data }: any) => updateData(data)}\n                onError={(err: any) => form.handleError(err)}\n              >\n                Publier cette catégorie\n              </PublishButton>\n            )}\n          </div>\n        </div>\n      </div>\n    </Staff.View>\n  );\n}\n\nconst CoverCard = (props: { instance: ReturnType<typeof StaffCategory>; updateData: (r: any) => void }) => {\n  const { updateData, instance } = props;\n  const form = useForm({ view: 'src' });\n\n  const img = Staff.Img(instance?.cover_data || {});\n\n  if (!img?.slug)\n    return (\n      <div className=\"d-flex align-items-center justify-content-center flex-column text-center border-1 rounded p-3\">\n        <StaffImgAddButton\n          onSuccess={({ data }: any) => {\n            instance\n              .update({ cover: data.slug })\n              .then(({ data }: any) => updateData(data))\n              .catch((err: any) => {});\n          }}\n          label=\"Ajouter une image\"\n          className=\"btn-primary-3 btn-md\"\n        />\n      </div>\n    );\n\n  const Image = getImageComponent(form.values.view);\n  return (\n    <Form context={form} className=\"p-cover-update-form\">\n      <Staff.Section\n        border\n        title={\n          <StaffImgDeleteButton\n            onSuccess={() => updateData({ cover_data: null, cover: null })}\n            instance={img}\n            className=\"btn-danger-3\"\n          >\n            <Icons.Trash />\n          </StaffImgDeleteButton>\n        }\n        actions={<StaffImgViewSelect required name=\"view\" />}\n        className=\"p-image-card\"\n      >\n        <StaffImgUpdateButton\n          instance={img}\n          field={form.values.view}\n          onSuccess={({ data }: any) => updateData({ cover: data.slug, cover_data: data })}\n        >\n          <Image {...img} />\n        </StaffImgUpdateButton>\n      </Staff.Section>\n    </Form>\n  );\n};\n\nexport const getImageComponent = (view: string) => {\n  switch (view) {\n    case 'mobile':\n      return StaffImg.Mobile;\n    case 'square':\n      return StaffImg.Square;\n    case 'thumb':\n      return StaffImg.Thumb;\n    case 'picture':\n      return StaffImg.Picture;\n    default:\n      return StaffImg.Image;\n  }\n};\n"],"names":["CategoryCreateForm","props","form","useForm","name","CategoryForm","context","onSubmit","e","preventDefault","StaffCategory","create","values","then","res","onSuccess","catch","err","handleError","onFailure","className","NameField","error","errors","value","CategoryUpdateForm","instance","isR","fields","children","onError","onWillSubmit","rest","fd","forEach","field","update","includes","label","text","DescriptionField","description","PositionField","position","placeholder","required","type","min","mapData2Values","data","is_published","meta_title","meta_slug","meta_description","CategoryStaffUpdateView","catSlug","useParams","useRequest","slug","retrieve","refreshDeps","document","title","setValues","response","updateData","r","Response","isSuccess","handleSuccess","back","requiredPerms","CoverCard","style","top","view","img","Staff","cover_data","cover","Image","getImageComponent","border","actions","StaffImg","Mobile","Square","Thumb","Picture"],"sourceRoot":""}