{"version":3,"file":"static/js/891.e83d8aef.chunk.js","mappings":"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","sources":["../../../../shopy/shopy-storejs/src/product/views.Update/components.tsx","../../../../shopy/shopy-storejs/src/product/views.Update/tabs.MediaUpdate.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Icons, TImg } from '@miq/componentjs';\n\nimport { StaffImg, StaffImgDeleteButton, TImgButtonDeleteProps } from '@miq/staffjs';\n\nexport const ProductImgReorderGridItem = ({\n  img,\n  ...props\n}: {\n  img: TImg;\n  order: TImg | null;\n  setOrder: React.Dispatch<React.SetStateAction<TImg | null>>;\n  onOrderChange: (p: { from: TImg; to: TImg }) => void;\n}) => {\n  const { order, setOrder, onOrderChange } = props;\n\n  return (\n    <div\n      draggable\n      onDragEnter={(e) => setOrder(img)}\n      onDragEnd={(e) => {\n        if (!order || order.slug === img.slug) return;\n\n        StaffImg(img)\n          .swapPosition(order.slug!, order.position)\n          .then(({ data }) => onOrderChange(data))\n          .catch((err) => {\n            console.error(err);\n          });\n      }}\n    >\n      <StaffImg.Square {...img} className=\"rounded\" />\n    </div>\n  );\n};\n\nexport const ProductImgDeleteButton = (props: TImgButtonDeleteProps) => (\n  <StaffImgDeleteButton {...props}>\n    <Icons.Trash />\n  </StaffImgDeleteButton>\n);\n","import * as React from 'react';\n\n// import lang from '../views.lang';\n\nimport Staff, { StaffImg, StaffImgAddButton, TSImgInstance } from '@miq/staffjs';\nimport { getCN } from '@miq/utiljs';\nimport { Button, Icons, TImg, TViewSectionProps } from '@miq/componentjs';\n\nimport { ProductImagesAddButton } from '../buttons';\nimport { TProductUpdateTabProps } from './utils';\nimport { ProductImgDeleteButton, ProductImgReorderGridItem } from './components';\n\nexport default function ProductUpdateMediaTab(props: TProductUpdateTabProps) {\n  const { instance, onUpdate } = props;\n  const { cover_data, images_data } = instance;\n\n  const [isReordering, setReordering] = React.useState<boolean>(false);\n  const [order, setOrder] = React.useState<TImg | null>(null);\n\n  return (\n    <Staff.Section\n      title={\n        <ProductImagesAddButton\n          productInstance={instance}\n          onSuccess={(res: any) => onUpdate?.(res.data)}\n          className=\"d-flex align-items-center\"\n        >\n          <Icons.CloudUpload />\n          <span className=\"ms-1 d-none d-md-block\">Upload images</span>\n        </ProductImagesAddButton>\n      }\n      actions={\n        <>\n          <div className=\"d-none d-md-block\">\n            <Button\n              onClick={() => setReordering(!isReordering)}\n              className={getCN(['btn-round', isReordering ? 'btn-primary' : 'btn-secondary-4'])}\n            >\n              <Icons.DragDrop />\n            </Button>\n          </div>\n        </>\n      }\n    >\n      {isReordering ? (\n        <div className=\"d-grid grid-3 gap-2\">\n          {images_data?.map((img) => (\n            <ProductImgReorderGridItem\n              {...{ img, order, setOrder }}\n              onOrderChange={(data) => {\n                onUpdate?.({\n                  ...instance.export(),\n                  images_data: images_data.map((i) => {\n                    if (i.slug === data?.to?.slug) return data?.from;\n                    if (i.slug === data?.from?.slug) return data?.to;\n                    return i;\n                  }),\n                });\n                setOrder(null);\n              }}\n              key={img.slug}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"d-grid grid-2 grid-md-3 grid-lg-4 gap-2\">\n          <CoverCard img={StaffImg(cover_data)} productInstance={instance} {...{ onUpdate }} />\n\n          {instance?.images_data?.map((image) => {\n            const img = StaffImg(image);\n            const swapCover = () => instance.swapCover(img.slug!).then(({ data }: any) => onUpdate(data));\n            return (\n              <ImageCard\n                img={img}\n                actions={<Staff.Button onClick={swapCover}>Set as cover</Staff.Button>}\n                onDelete={() =>\n                  onUpdate({\n                    ...instance.export(),\n                    images_data: instance.images_data!.filter((i) => i.slug !== img.slug),\n                    images: instance.images!.filter((i) => i !== img.slug),\n                  })\n                }\n                key={img.slug}\n              />\n            );\n          })}\n        </div>\n      )}\n    </Staff.Section>\n  );\n}\n\ntype TImgCardProps = Omit<TViewSectionProps, 'title'> & { img: TSImgInstance; onDelete: (p: TImg) => void };\n\nconst CoverCard = (\n  props: Omit<TImgCardProps, 'onDelete'> & {\n    productInstance: TProductUpdateTabProps['instance'];\n    onUpdate: TProductUpdateTabProps['onUpdate'];\n  }\n) => {\n  const { img, onUpdate, productInstance } = props;\n\n  if (!img.slug)\n    return (\n      <div className=\"p-cover-add-btn d-flex align-items-center justify-content-center flex-column text-center border-1 rounded p-3\">\n        <p className=\"text-sm text-muted mb-3\">Ce produit n'a pas d'image principale</p>\n        <StaffImgAddButton\n          onSuccess={(r) => {\n            productInstance\n              .update({ cover: r?.data.slug })\n              .then((x) => onUpdate(x?.data))\n              .catch((err) => {});\n          }}\n          label=\"Ajouter une image\"\n          className=\"btn-primary-3 btn-md\"\n        />\n      </div>\n    );\n\n  return (\n    <ImageCard\n      {...props}\n      onDelete={() => onUpdate({ ...productInstance.export(), cover_data: undefined, cover: undefined })}\n    />\n  );\n};\n\nconst ImageCard = ({ img, actions, ...props }: TImgCardProps) => {\n  return (\n    <Staff.Section\n      border\n      title={\n        <ProductImgDeleteButton onSuccess={(r) => props.onDelete(r?.data)} instance={img} className=\"btn-danger-3\" />\n      }\n      actions={actions}\n      className=\"p-image-card\"\n    >\n      <StaffImg.Image {...img.export()} />\n    </Staff.Section>\n  );\n};\n"],"names":["ProductImgReorderGridItem","img","props","order","setOrder","onOrderChange","draggable","onDragEnter","e","onDragEnd","slug","StaffImg","swapPosition","position","then","data","catch","err","console","error","className","ProductImgDeleteButton","ProductUpdateMediaTab","instance","onUpdate","cover_data","images_data","React","isReordering","setReordering","title","productInstance","onSuccess","res","actions","onClick","getCN","map","export","i","to","from","key","CoverCard","image","ImageCard","swapCover","onDelete","filter","images","undefined","cover","r","update","x","label","border"],"sourceRoot":""}